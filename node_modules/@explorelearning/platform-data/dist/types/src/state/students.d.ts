declare const _default: () => {
    namespaced: boolean;
    state: {
        students: {};
        /**
         * In order to save on performance for large lists of students, we've put in a workaround so that we only need to watch the id of the change to the students object, instead of watching the entire object (which would require a lot of work for Vue to set up all of the thousands of reactive properties). This "id" gets incremented after each mutation to signify that the "students" object has changed and any components depending on that object might need to manually reset their references.
         */
        studentsChangeID: number;
    };
    mutations: {
        CLEAR_STUDENTS(state: any): void;
        ADD_STUDENTS(state: any, students: any): void;
        UPDATE_STUDENTS(state: any, students: any): void;
        DELETE_STUDENTS(state: any, studentIDs: any): void;
    };
    actions: {
        setStudents({ commit }: {
            commit: any;
        }, students: any): void;
    };
    getters: {
        students: (state: any) => any;
        studentList: (state: any) => unknown[];
        studentsChangeID: (state: any) => any;
    };
};
/**
 * Module providing state for student objects
 */
export default _default;
