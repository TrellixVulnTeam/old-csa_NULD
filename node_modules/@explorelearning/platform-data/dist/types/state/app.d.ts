import ElAuthenticator from '@explorelearning/el-authenticator';
declare const _default: ({ rootNamespace, apis, endpoints }: {
    rootNamespace: any;
    apis: any;
    endpoints: any;
}) => {
    namespaced: boolean;
    state: {
        tenantID: any;
        subscriptionID: any;
        sourceID: any;
        jti: any;
    };
    mutations: {
        /** Set the apis.platform reference to a new instance of the platform rest api based on a provided authenticator and code handlers */
        INIT_API(_: any, { auth }: {
            auth: any;
        }): void;
        /** Set the information related to the app and the authenticated session */
        SET_APP_INFO(state: any, payload: any): void;
        /** Set subscriptions objects in the state */
        SET_SUBSCRIPTIONS(state: any, subscriptions: any): void;
        /** Set institutions objects in the state */
        SET_INSTITUTIONS(state: any, institutions: any): void;
    };
    actions: {
        /**
         * Initialize the app, setting up authentication and api instances and fetching the authenticated user's profile info along with misc app info
         */
        initApp({ dispatch }: {
            dispatch: any;
        }, { logout }?: {
            logout?: boolean;
        }): Promise<{
            auth: any;
        }>;
        /**
         * Initialize an authenticated api instance
         */
        initApi({ commit }: {
            commit: any;
        }, { logout }?: {
            logout?: boolean;
        }): Promise<{
            auth: ElAuthenticator;
        }>;
        /**
         * authenticate the session and then initialize an api instance
         */
        login({ dispatch }: {
            dispatch: any;
        }, { username, password, url }: {
            username: any;
            password: any;
            url: any;
        }): Promise<void>;
        /**
         * unauthenticate the session and clear protected employee data
         */
        logout({ dispatch }: {
            dispatch: any;
        }): Promise<void>;
        /**
         * fetch the model data for the app, including teacher, student, class, institution, and subscription objects and set them in the state
         */
        fetchModel({ dispatch, commit }: {
            dispatch: any;
            commit: any;
        }, params: any): Promise<any>;
        /**
         * fetch the student model and return it (@todo set the data in the state)
         */
        fetchStudentModel(): any;
        /**
         * adds students to a specified product
         */
        addStudentsToProduct({ state }: {
            state: any;
        }, { studentIds, productId }: {
            studentIds: any;
            productId: any;
        }): Promise<[unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown]>;
        /**
         * searches for logins by subscription id
         */
        searchLoginsBySubscription({ state: { tenantID } }: {
            state: {
                tenantID: any;
            };
        }, { subscriptionId }: {
            subscriptionId: any;
        }): any;
    };
    getters: {
        subscriptions: (s: any) => any;
        institutions: (s: any) => any;
    };
};
/**
 * Provides contextual state for the app with respect to authentication, subscription, and other platform information. Provides methods to initialize the app's state, authenticate the session, and pull initial model data. Returns a Vuex module for app context and functionality given the root namespace, the reference to apis, and relevant endpoints
 */
export default _default;
