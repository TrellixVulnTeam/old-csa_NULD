export default class State {
    private endpoints;
    private store;
    private removeOnAuthenticated;
    namespace: string;
    static modules: {
        app: ({ rootNamespace, apis, endpoints }: {
            rootNamespace: any;
            apis: any;
            endpoints: any;
        }) => {
            namespaced: boolean;
            state: {
                tenantID: any;
                subscriptionID: any;
                sourceID: any;
                jti: any;
            };
            mutations: {
                INIT_API(_: any, { auth }: {
                    auth: any;
                }): void;
                SET_APP_INFO(state: any, payload: any): void;
                SET_SUBSCRIPTIONS(state: any, subscriptions: any): void;
                SET_INSTITUTIONS(state: any, institutions: any): void;
            };
            actions: {
                initApp({ dispatch }: {
                    dispatch: any;
                }, { logout }?: {
                    logout?: boolean;
                }): Promise<{
                    auth: any;
                }>;
                initApi({ commit }: {
                    commit: any;
                }, { logout }?: {
                    logout?: boolean;
                }): Promise<{
                    auth: import("@explorelearning/el-authenticator").default;
                }>;
                login({ dispatch }: {
                    dispatch: any;
                }, { username, password, url }: {
                    username: any;
                    password: any;
                    url: any;
                }): Promise<void>;
                logout({ dispatch }: {
                    dispatch: any;
                }): Promise<void>;
                fetchModel({ dispatch, commit }: {
                    dispatch: any;
                    commit: any;
                }, params: any): Promise<any>;
                fetchStudentModel(): any;
                addStudentsToProduct({ state }: {
                    state: any;
                }, { studentIds, productId }: {
                    studentIds: any;
                    productId: any;
                }): Promise<[unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown]>;
                searchLoginsBySubscription({ state: { tenantID } }: {
                    state: {
                        tenantID: any;
                    };
                }, { subscriptionId }: {
                    subscriptionId: any;
                }): any;
            };
            getters: {
                subscriptions: (s: any) => any;
                institutions: (s: any) => any;
            };
        };
        classes: ({ apis }: {
            apis: any;
        }) => {
            namespaced: boolean;
            state: {
                classes: {};
            };
            mutations: {
                SET_CLASSES(state: any, classes: any): void;
                CREATE_CLASS(state: any, data: any): void;
                DELETE_CLASS(state: any, classID: any): void;
                UPDATE_CLASS(state: any, { data, classID }: {
                    data: any;
                    classID: any;
                }): void;
            };
            actions: {
                setClasses({ commit }: {
                    commit: any;
                }, classes: any): void;
            };
            getters: {
                classes(state: any): any;
                classList(state: any): unknown[];
            };
        };
        employee: ({ apis }: {
            apis: any;
        }) => {
            namespaced: boolean;
            state: {
                userData: {};
            };
            mutations: {
                CLEAR_USER_DATA(state: any): void;
                SET_USER_DATA(state: any, { id, data }: {
                    id: any;
                    data: any;
                }): void;
            };
            actions: {
                loadUserDataById({ state, commit }: {
                    state: any;
                    commit: any;
                }, { id, force }: {
                    id: any;
                    force?: boolean;
                }): Promise<void>;
                clearAllData({ commit }: {
                    commit: any;
                }): void;
            };
            getters: {
                userDataMap: (s: any) => any;
            };
        };
        profile: ({ apis }: {
            apis: any;
        }) => {
            namespaced: boolean;
            state: {
                profile: {};
            };
            mutations: {
                SET_PROFILE(state: any, profile: any): void;
            };
            actions: {
                fetchProfile({ commit }: {
                    commit: any;
                }): Promise<void>;
            };
            getters: {
                isHomeUser(state: any): boolean;
                isStudent(state: any): boolean;
                isTeacher(state: any): boolean;
                isParent(state: any): boolean;
                isAdmin(state: any): boolean;
                isEmployee(state: any): boolean;
                isDeveloper(state: any): boolean;
                profile(state: any): any;
            };
        };
        students: () => {
            namespaced: boolean;
            state: {
                students: {};
                studentsChangeID: number;
            };
            mutations: {
                CLEAR_STUDENTS(state: any): void;
                ADD_STUDENTS(state: any, students: any): void;
                UPDATE_STUDENTS(state: any, students: any): void;
                DELETE_STUDENTS(state: any, studentIDs: any): void;
            };
            actions: {
                setStudents({ commit }: {
                    commit: any;
                }, students: any): void;
            };
            getters: {
                students: (state: any) => any;
                studentList: (state: any) => unknown[];
                studentsChangeID: (state: any) => any;
            };
        };
        teachers: () => {
            namespaced: boolean;
            state: {
                teachers: {};
            };
            mutations: {
                SET_TEACHERS(state: any, teachers: any): void;
                DELETE_TEACHERS(state: any, teacherIDs: any): void;
            };
            actions: {
                setTeachers({ commit }: {
                    commit: any;
                }, teachers: any): void;
            };
            getters: {
                teachers: (state: any) => any;
                teacherList: (state: any) => unknown[];
            };
        };
    };
    constructor({ namespace, endpoints }?: {
        namespace?: string;
        endpoints?: {};
    });
    private getApi;
    /**
     * Register the vuex modules to the internal `store` reference and set the namespace
     */
    register(store: any): void;
    /**
     * Given a function, subscribe to the app's INIT_API mutation (meaning the api has been authenticated) and call that function, passing the `auth` instance from the platform api
     * @param {Function} callback The callback function to call
     */
    onAuthenticated(callback: (a: any) => void): void;
}
