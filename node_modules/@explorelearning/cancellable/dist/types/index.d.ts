/**
 * Interface for promises that can be cancelled
 * @interface Cancellable
 * @property {Promise} promise A promise to call the specified function after the specified delay
 * @property {function} cancel A function that prevents the promise from calling the specified function
 */
interface Cancellable {
    promise: Promise<any>;
    cancel: Function;
}
/**
 * Takes in a function and a delay amount and returns an object with the promise to call the function after the delay and a `cancel` function to prevent the function from getting called.
 * @param {function} fnc A function to make cancellable
 * @param {number} delay An amount of time to wait before calling the function
 * @return {Cancellable} The cancellable function
 */
declare function cancellable(fnc: Function, delay: number): Cancellable;
export default cancellable;
