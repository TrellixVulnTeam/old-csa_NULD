var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __commonJS = (callback, module2) => () => {
  if (!module2) {
    module2 = {exports: {}};
    callback(module2.exports, module2);
  }
  return module2.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, {get: all[name2], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true})), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (result) => {
      return result.done ? resolve(result.value) : Promise.resolve(result.value).then(fulfilled, rejected);
    };
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// ../logger/dist/bundle.js
var require_bundle = __commonJS((exports2) => {
  var __defProp2 = Object.defineProperty;
  var __markAsModule2 = (target) => __defProp2(target, "__esModule", {value: true});
  var __export2 = (target, all) => {
    for (var name22 in all)
      __defProp2(target, name22, {get: all[name22], enumerable: true});
  };
  __markAsModule2(exports2);
  __export2(exports2, {
    createLogger: () => createLogger,
    versionTag: () => versionTag2
  });
  var name2 = "@explorelearning/logger";
  var version2 = "1.10.15";
  var description2 = "Fancy logging in the browser console";
  var main2 = "dist/bundle.js";
  var types2 = "dist/types/index.d.ts";
  var files2 = [
    "/dist"
  ];
  var scripts2 = {
    build: "node ../../helpers/build.js",
    "build:types": "npx tsc",
    test: "npx jest"
  };
  var repository2 = {
    type: "git",
    url: "git+https://github.com/ExploreLearning/el-web.git"
  };
  var author2 = "Brian McMillen <brian.mcmillen@explorelearning.com>";
  var license2 = "ISC";
  var bugs2 = {
    url: "https://github.com/ExploreLearning/el-web/issues"
  };
  var homepage2 = "https://github.com/ExploreLearning/el-web#readme";
  var package_default2 = {
    name: name2,
    version: version2,
    description: description2,
    main: main2,
    types: types2,
    files: files2,
    scripts: scripts2,
    repository: repository2,
    author: author2,
    license: license2,
    bugs: bugs2,
    homepage: homepage2
  };
  function log(...params) {
    if (localStorage.getItem("debug") === "true")
      console.info(...params);
  }
  if (!window.ELLogger) {
    window.ELLogger = {
      versionTagMap: {}
    };
    window.addEventListener("load", () => {
      const {versionTagMap} = window.ELLogger;
      Object.keys(versionTagMap).forEach((name22) => {
        logVersionTag({name: name22, version: versionTagMap[name22]});
      });
    });
  }
  versionTag2(package_default2);
  function logVersionTag({name: name22, version: version22}) {
    log(`%c${name22}%cv${version22}`, "color: #fbf1c7; background: #458588; padding: 2px 4px; border-radius: 3px 0 0 3px;", "color: #fbf1c7; background: #d65d0e; padding: 2px 4px; border-radius: 0 3px 3px 0");
  }
  function versionTag2({name: name22, version: version22}) {
    window.ELLogger.versionTagMap[name22] = version22;
  }
  function createLogger(name22) {
    return (...params) => {
      log(`${name22}:
`, ...params);
    };
  }
});

// src/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => src_default
});
var import_axios = __toModule(require("axios"));
var import_logger = __toModule(require_bundle());

// package.json
var name = "@explorelearning/base-api";
var version = "1.10.19";
var description = "A base api class for explorelearning apis which can be extended to handle product specific calls";
var main = "dist/bundle.js";
var types = "dist/types/index.d.ts";
var files = [
  "/dist"
];
var scripts = {
  build: "node ../../helpers/build.js --external=axios",
  "build:types": "npx tsc",
  test: "npx jest"
};
var repository = {
  type: "git",
  url: "git+https://github.com/ExploreLearning/el-web.git"
};
var author = "Brian McMillen <brian.mcmillen@explorelearning.com>";
var license = "ISC";
var bugs = {
  url: "https://github.com/ExploreLearning/el-web/issues"
};
var homepage = "https://github.com/ExploreLearning/el-web#readme";
var devDependencies = {
  "@explorelearning/el-authenticator": "^1.10.19",
  "@explorelearning/logger": "^1.10.15",
  axios: "^0.21.1"
};
var peerDependencies = {
  "@explorelearning/el-authenticator": "^1.10.6",
  "@explorelearning/logger": "^1.10.7",
  axios: "^0.21.1"
};
var gitHead = "e474bc856a8276bbc47c73a2a2ee69523319148e";
var package_default = {
  name,
  version,
  description,
  main,
  types,
  files,
  scripts,
  repository,
  author,
  license,
  bugs,
  homepage,
  devDependencies,
  peerDependencies,
  gitHead
};

// src/index.ts
import_logger.versionTag(package_default);
var ExploreLearningAPI = class {
  constructor({auth, baseURL, errorCodeHandlers = {}}) {
    this.outboundRequestCount = 0;
    this.refreshPromise = null;
    this.isTokenStale = false;
    this.auth = null;
    this.api = import_axios.default.create({
      baseURL,
      headers: {"Content-Type": "application/json"},
      withCredentials: true
    });
    if (auth) {
      this.useAuth({auth, errorCodeHandlers});
    }
  }
  useAuth({auth, errorCodeHandlers = {}}) {
    this.auth = auth;
    this.api.interceptors.request.use((request) => __async(this, null, function* () {
      if (this.outboundRequestCount === 0 && this.isTokenStale) {
        if (!this.refreshPromise) {
          this.refreshPromise = this.auth.refresh();
        }
        yield this.refreshPromise;
        this.refreshPromise = null;
        this.isTokenStale = false;
      }
      request.headers["X-CSRFToken"] = this.auth.getToken();
      this.outboundRequestCount++;
      return request;
    }));
    this.api.interceptors.response.use((response) => {
      this.outboundRequestCount--;
      const headers = response.headers || {};
      const xclaims = headers["X-CLAIMS"] || headers["x-claims"];
      if (xclaims) {
        this.auth.setClaims(this.auth.decodeClaims(xclaims));
      }
      if (headers["EL-Refresh"] || headers["el-refresh"]) {
        this.isTokenStale = true;
      }
      return response;
    }, (error) => __async(this, null, function* () {
      var _a;
      this.outboundRequestCount--;
      if (!error || !error.response) {
        return;
      }
      const {status} = error.response;
      if (status === 401) {
        this.auth.authenticate({force: true});
      }
      (_a = errorCodeHandlers[status]) == null ? void 0 : _a.call(errorCodeHandlers);
      throw error;
    }));
  }
  getAuth() {
    return this.auth;
  }
};
var src_default = ExploreLearningAPI;
