import valueFromPath from './valueFromPath';

describe('valueFromPath', () => {
  const source = { foo: { bar: 'wizard' } };

  it('should return the value at the specified path by array of keys', () => {
    const path = ['foo', 'bar'];
    expect(valueFromPath({ source, path })).toBe('wizard');
  });

  it('should return the value at the specified path by string of keys', () => {
    const path = 'foo.bar';
    expect(valueFromPath({ source, path })).toBe('wizard');
  });

  it('should return the value at the specified path by string of keys with custom delimiter', () => {
    const path = 'foo_bar';
    const delimiter = '_';
    expect(valueFromPath({ source, path, delimiter })).toBe('wizard');
  });

  it('should return undefined if the specified path does not exist', () => {
    const path = 'bar.foo';
    expect(valueFromPath({ source, path })).toBeUndefined();
  });

  it('should return undefined if no param provided', () => {
    expect(valueFromPath()).toBeUndefined();
  });

  it('should return the source object if no path provided', () => {
    expect(valueFromPath({ source })).toEqual(source);
  });
});
