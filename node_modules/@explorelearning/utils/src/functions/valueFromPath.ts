/**
 * Traverse an object to the specified path and return the value at that path. Path can be specified by an array of strings (e.g. ["foo", "bar"]) or a string with each key value delimitted by a character ("." by default) (e.g. "foo.bar").
 * @param {Object} [obj = {}] The object with param properties
 * @param {Object} [obj.source = {}] The source object to traverse for a value
 * @param {string[]|string} [obj.path = []] An array of key strings or a delimitted string of keys specifying the keys to traverse in the object
 * @param {string} [obj.delimiter = '.'] The delimiter to use when the path has been specified as a string
 * @return {any} The value at the specified path
 */
function valueFromPath({
  source,
  path = [],
  delimiter = '.'
}: {
  source?: object;
  path?: string[] | string;
  delimiter?: string;
} = {}): any {
  const items: string[] = Array.isArray(path) ? path : path.split(delimiter);
  return source && typeof source === 'object'
    ? items.reduce((acc: object, key: string) => (acc ? acc[key] : undefined), source)
    : undefined;
}

export default valueFromPath;
