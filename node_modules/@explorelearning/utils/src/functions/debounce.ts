/**
 * Debounce a function, returning the value of the function's returned value
 * @param {Function} func The function to debounce
 * @param {number} delay The amount of delay (in ms)
 * @return {Function} The debounced function
 */
function debounce(func: Function, delay: number): Function {
  let timeout: NodeJS.Timeout;
  return function(...args: any): Promise<any> {
    clearTimeout(timeout);
    return new Promise(resolve => {
      timeout = setTimeout(() => resolve(func.apply(this, args)), delay);
    });
  };
}

export default debounce;
