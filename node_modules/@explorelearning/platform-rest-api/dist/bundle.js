var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __commonJS = (callback, module2) => () => {
  if (!module2) {
    module2 = {exports: {}};
    callback(module2.exports, module2);
  }
  return module2.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, {get: all[name2], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true})), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (result) => {
      return result.done ? resolve(result.value) : Promise.resolve(result.value).then(fulfilled, rejected);
    };
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// ../urls/dist/bundle.js
var require_bundle = __commonJS((exports2) => {
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __markAsModule2 = (target) => __defProp2(target, "__esModule", {value: true});
  var __commonJS2 = (callback, module22) => () => {
    if (!module22) {
      module22 = {exports: {}};
      callback(module22.exports, module22);
    }
    return module22.exports;
  };
  var __export2 = (target, all) => {
    for (var name22 in all)
      __defProp2(target, name22, {get: all[name22], enumerable: true});
  };
  var __exportStar2 = (target, module22, desc) => {
    if (module22 && typeof module22 === "object" || typeof module22 === "function") {
      for (let key of __getOwnPropNames2(module22))
        if (!__hasOwnProp2.call(target, key) && key !== "default")
          __defProp2(target, key, {get: () => module22[key], enumerable: !(desc = __getOwnPropDesc2(module22, key)) || desc.enumerable});
    }
    return target;
  };
  var __toModule2 = (module22) => {
    if (module22 && module22.__esModule)
      return module22;
    return __exportStar2(__markAsModule2(__defProp2(module22 != null ? __create2(__getProtoOf2(module22)) : {}, "default", {value: module22, enumerable: true})), module22);
  };
  var require_bundle3 = __commonJS2((exports22) => {
    var __defProp22 = Object.defineProperty;
    var __markAsModule22 = (target) => __defProp22(target, "__esModule", {value: true});
    var __export22 = (target, all) => {
      for (var name222 in all)
        __defProp22(target, name222, {get: all[name222], enumerable: true});
    };
    __markAsModule22(exports22);
    __export22(exports22, {
      createLogger: () => createLogger,
      versionTag: () => versionTag2
    });
    var name22 = "@explorelearning/logger";
    var version22 = "1.10.15";
    var description22 = "Fancy logging in the browser console";
    var main22 = "dist/bundle.js";
    var types22 = "dist/types/index.d.ts";
    var files22 = [
      "/dist"
    ];
    var scripts22 = {
      build: "node ../../helpers/build.js",
      "build:types": "npx tsc",
      test: "npx jest"
    };
    var repository22 = {
      type: "git",
      url: "git+https://github.com/ExploreLearning/el-web.git"
    };
    var author22 = "Brian McMillen <brian.mcmillen@explorelearning.com>";
    var license22 = "ISC";
    var bugs22 = {
      url: "https://github.com/ExploreLearning/el-web/issues"
    };
    var homepage22 = "https://github.com/ExploreLearning/el-web#readme";
    var package_default22 = {
      name: name22,
      version: version22,
      description: description22,
      main: main22,
      types: types22,
      files: files22,
      scripts: scripts22,
      repository: repository22,
      author: author22,
      license: license22,
      bugs: bugs22,
      homepage: homepage22
    };
    function log(...params) {
      if (localStorage.getItem("debug") === "true")
        console.info(...params);
    }
    if (!window.ELLogger) {
      window.ELLogger = {
        versionTagMap: {}
      };
      window.addEventListener("load", () => {
        const {versionTagMap} = window.ELLogger;
        Object.keys(versionTagMap).forEach((name222) => {
          logVersionTag({name: name222, version: versionTagMap[name222]});
        });
      });
    }
    versionTag2(package_default22);
    function logVersionTag({name: name222, version: version222}) {
      log(`%c${name222}%cv${version222}`, "color: #fbf1c7; background: #458588; padding: 2px 4px; border-radius: 3px 0 0 3px;", "color: #fbf1c7; background: #d65d0e; padding: 2px 4px; border-radius: 0 3px 3px 0");
    }
    function versionTag2({name: name222, version: version222}) {
      window.ELLogger.versionTagMap[name222] = version222;
    }
    function createLogger(name222) {
      return (...params) => {
        log(`${name222}:
`, ...params);
      };
    }
  });
  __markAsModule2(exports2);
  __export2(exports2, {
    default: () => src_default2
  });
  var import_logger2 = __toModule2(require_bundle3());
  var name2 = "@explorelearning/urls";
  var version2 = "1.10.15";
  var description2 = "Vue plugin for referencing common urls relative to the current domain name";
  var main2 = "dist/bundle.js";
  var types2 = "dist/types/index.d.ts";
  var files2 = [
    "/dist"
  ];
  var scripts2 = {
    build: "node ../../helpers/build.js && npm run markdown",
    "build:types": "npx tsc",
    markdown: "node ./helpers/generateMarkdown.js",
    test: "npx jest"
  };
  var repository2 = {
    type: "git",
    url: "git+https://github.com/ExploreLearning/el-web.git"
  };
  var author2 = "Brian McMillen <brian.mcmillen@explorelearning.com>";
  var license2 = "ISC";
  var bugs2 = {
    url: "https://github.com/ExploreLearning/el-web/issues"
  };
  var devDependencies2 = {
    "@explorelearning/logger": "^1.10.15"
  };
  var peerDependencies2 = {
    "@explorelearning/logger": "^0.0.1"
  };
  var homepage2 = "https://github.com/ExploreLearning/el-web#readme";
  var gitHead2 = "2be1f9dd4fc5e52d0baa2aa16fe56337b0b509aa";
  var package_default2 = {
    name: name2,
    version: version2,
    description: description2,
    main: main2,
    types: types2,
    files: files2,
    scripts: scripts2,
    repository: repository2,
    author: author2,
    license: license2,
    bugs: bugs2,
    devDependencies: devDependencies2,
    peerDependencies: peerDependencies2,
    homepage: homepage2,
    gitHead: gitHead2
  };
  import_logger2.versionTag(package_default2);
  function getBaseUrl() {
    const {host} = window.location;
    const parts = host.split(".");
    const name22 = parts[parts.length - 2];
    return {
      elclouddev: "elclouddev.net",
      elcloudstage: "elcloudstage.net",
      explorelearning: "explorelearning.com"
    }[name22] || "elclouddev.net";
  }
  function getEnvName(baseUrl) {
    return {
      "elclouddev.net": "dev",
      "elcloudstage.net": "stage",
      "explorelearning.com": "prod"
    }[baseUrl || getBaseUrl()] || "dev";
  }
  function getUrls(baseUrl = "") {
    const base = baseUrl || process.env.EL_URLS_BASE || getBaseUrl();
    const services = process.env.EL_URLS_SERVICES || `https://services.${base}`;
    const content = process.env.EL_URLS_CONTENT || `https://content.${base}`;
    const apps = process.env.EL_URLS_APPS || `https://apps.${base}`;
    const platform = process.env.EL_URLS_PLATFORM || `${services}/platform`;
    const platformApi = process.env.EL_URLS_PLATFORM_API || `${platform}/api`;
    const auth = process.env.EL_URLS_AUTH || `${platform}/auth`;
    const reflexApi = process.env.EL_URLS_REFLEX_API || `${services}/reflex/api`;
    const fraxApi = process.env.EL_URLS_FRAX_API || `${services}/frax/api`;
    const fraxSocket = process.env.EL_URLS_FRAX_SOCKET || `${services}/fraxws/api/frax-websocket`;
    const gizmos = process.env.EL_URLS_GIZMOS || `${services}/gizmos`;
    const nextgen = process.env.EL_URLS_NEXTGEN || `${services}/nextgen`;
    const student = process.env.EL_URLS_STUDENT || `${content}/reflex/index.html`;
    const accounts = process.env.EL_URLS_ACCOUNTS || `${apps}/account`;
    const login = process.env.EL_URLS_LOGIN || `${accounts}/login/reflex/teacher`;
    const logout = process.env.EL_URLS_LOGOUT || `${accounts}/reflex/logout`;
    const t4mfLogout = process.env.EL_URLS_T4MF_LOGOUT || "https://www.time4learning.com/App/Resources/Time4MathFactsLogout.aspx";
    const envName = getEnvName(base);
    const nextgenAssets = process.env.EL_URLS_NEXTGEN_ASSETS || `https://s3.amazonaws.com/el-gizmos-${envName}`;
    return {
      accounts,
      apps,
      auth,
      base,
      content,
      fraxApi,
      fraxSocket,
      gizmos,
      login,
      logout,
      nextgen,
      nextgenAssets,
      platform,
      platformApi,
      reflexApi,
      services,
      student,
      t4mfLogout
    };
  }
  var src_default2 = {
    install(Vue) {
      Vue.prototype.$urls = getUrls();
    },
    getBaseUrl,
    getUrls,
    getEnvName
  };
});

// ../logger/dist/bundle.js
var require_bundle2 = __commonJS((exports2) => {
  var __defProp2 = Object.defineProperty;
  var __markAsModule2 = (target) => __defProp2(target, "__esModule", {value: true});
  var __export2 = (target, all) => {
    for (var name22 in all)
      __defProp2(target, name22, {get: all[name22], enumerable: true});
  };
  __markAsModule2(exports2);
  __export2(exports2, {
    createLogger: () => createLogger,
    versionTag: () => versionTag2
  });
  var name2 = "@explorelearning/logger";
  var version2 = "1.10.15";
  var description2 = "Fancy logging in the browser console";
  var main2 = "dist/bundle.js";
  var types2 = "dist/types/index.d.ts";
  var files2 = [
    "/dist"
  ];
  var scripts2 = {
    build: "node ../../helpers/build.js",
    "build:types": "npx tsc",
    test: "npx jest"
  };
  var repository2 = {
    type: "git",
    url: "git+https://github.com/ExploreLearning/el-web.git"
  };
  var author2 = "Brian McMillen <brian.mcmillen@explorelearning.com>";
  var license2 = "ISC";
  var bugs2 = {
    url: "https://github.com/ExploreLearning/el-web/issues"
  };
  var homepage2 = "https://github.com/ExploreLearning/el-web#readme";
  var package_default2 = {
    name: name2,
    version: version2,
    description: description2,
    main: main2,
    types: types2,
    files: files2,
    scripts: scripts2,
    repository: repository2,
    author: author2,
    license: license2,
    bugs: bugs2,
    homepage: homepage2
  };
  function log(...params) {
    if (localStorage.getItem("debug") === "true")
      console.info(...params);
  }
  if (!window.ELLogger) {
    window.ELLogger = {
      versionTagMap: {}
    };
    window.addEventListener("load", () => {
      const {versionTagMap} = window.ELLogger;
      Object.keys(versionTagMap).forEach((name22) => {
        logVersionTag({name: name22, version: versionTagMap[name22]});
      });
    });
  }
  versionTag2(package_default2);
  function logVersionTag({name: name22, version: version22}) {
    log(`%c${name22}%cv${version22}`, "color: #fbf1c7; background: #458588; padding: 2px 4px; border-radius: 3px 0 0 3px;", "color: #fbf1c7; background: #d65d0e; padding: 2px 4px; border-radius: 0 3px 3px 0");
  }
  function versionTag2({name: name22, version: version22}) {
    window.ELLogger.versionTagMap[name22] = version22;
  }
  function createLogger(name22) {
    return (...params) => {
      log(`${name22}:
`, ...params);
    };
  }
});

// src/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => src_default
});
var import_base_api = __toModule(require("@explorelearning/base-api"));
var import_urls = __toModule(require_bundle());

// src/formatters.ts
function formatEntity(rawEntity) {
  var _a, _b, _c, _d;
  return {
    id: rawEntity.id,
    created: {
      loginId: (_a = rawEntity.createdByID) != null ? _a : rawEntity.createdByUserID,
      timestamp: (_b = rawEntity.createdOn) != null ? _b : rawEntity.createdOnLong
    },
    modified: {
      loginId: (_c = rawEntity.modifiedByID) != null ? _c : rawEntity.modifiedByUserID,
      timestamp: (_d = rawEntity.modifiedOn) != null ? _d : rawEntity.modifiedOnLong
    }
  };
}
function unformatEntity(entity) {
  var _a, _b, _c, _d;
  return {
    createdByID: (_a = entity.created) == null ? void 0 : _a.loginId,
    createdOn: (_b = entity.created) == null ? void 0 : _b.timestamp,
    modifiedByID: (_c = entity.modified) == null ? void 0 : _c.loginId,
    modifiedOn: (_d = entity.modified) == null ? void 0 : _d.timestamp
  };
}
function formatUser(rawUser) {
  var _a;
  const user = __assign(__assign({}, formatEntity(__assign(__assign({}, rawUser), {id: rawUser.loginID}))), {
    lastLogin: rawUser.lastLoginOn,
    username: rawUser.username,
    firstName: rawUser.firstname,
    middleName: rawUser.middlename,
    lastName: rawUser.lastname,
    sisUserId: rawUser.sisUserID,
    languageId: (_a = rawUser.languageID) != null ? _a : rawUser.langID,
    isDeleted: rawUser.isDeleted,
    isRostered: rawUser.userRostered,
    tenantId: +rawUser.tenantID,
    licenses: rawUser.licenses,
    matchingLicenses: rawUser.matchingLicenses,
    titleId: rawUser.titleID,
    roleId: rawUser.roleID,
    email: rawUser.email,
    isValidEmail: rawUser.isValidEmail,
    isSubscribedToEmails: rawUser.isSubscribedToEmails,
    displayName: rawUser.displayName,
    profileMessage: rawUser.profileMessage,
    passwordClear: rawUser.passwordClear
  });
  if ("cleverID" in rawUser)
    user.isCleverEnabled = !!rawUser.cleverID;
  if ("ltiUserID" in rawUser)
    user.isLtiEnabled = !!rawUser.ltiUserID;
  if ("samlUserID" in rawUser)
    user.isSamlEnabled = !!rawUser.samlUserID;
  return user;
}
function unformatUser(user) {
  return __assign(__assign({}, unformatEntity(user)), {
    loginID: user.id,
    lastLoginOn: user.lastLogin,
    username: user.username,
    firstname: user.firstName,
    middlename: user.middleName,
    lastname: user.lastName,
    sisUserID: user.sisUserId,
    languageID: user.languageId,
    isDeleted: user.isDeleted,
    userRostered: user.isRostered,
    tenantID: user.tenantId,
    licenses: user.licenses,
    matchingLicenses: user.matchingLicenses,
    titleID: user.titleId,
    roleID: user.roleId,
    email: user.email,
    isValidEmail: user.isValidEmail,
    isSubscribedToEmails: user.isSubscribedToEmails,
    displayName: user.displayName,
    profileMessage: user.profileMessage,
    passwordClear: user.passwordClear
  });
}
function formatNonStudent(rawUser) {
  return __assign(__assign({}, formatUser(rawUser)), {
    showSchool: rawUser.showSchool,
    profilePicture: rawUser.profilePicture
  });
}
function unformatNonStudent(user) {
  return __assign(__assign({}, unformatUser(user)), {
    showSchool: user.showSchool,
    profilePicture: user.profilePicture
  });
}
function formatStudents(rawStudents) {
  return (rawStudents || []).filter((s) => !s.isDeleted).map((rawData) => {
    var _a;
    return __assign(__assign({}, formatUser(rawData)), {
      passwordClear: rawData.passwordClear || rawData.password,
      gradeId: (_a = rawData.gradeID) != null ? _a : rawData.gradeLevelID,
      gradeChangedOn: rawData.gradeChangedOn,
      engProfId: rawData.limitedEnglishProficiencyID,
      ethnicityId: rawData.ethnicityID,
      disadvId: rawData.ecoDisadvantagedID,
      specialEdId: rawData.specialEdStatusID,
      genderId: rawData.genderID,
      reflexJson: rawData.reflexJson,
      fracJson: rawData.fracJson,
      licenses: rawData.licenses,
      hasParent: rawData.hasParent,
      institutionId: rawData.institutionID,
      institutionName: rawData.institutionName
    });
  });
}
function unformatStudents(students) {
  return (students || []).map((student) => __assign(__assign({}, unformatUser(student)), {
    password: student.password,
    passwordClear: student.passwordClear,
    gradeLevelID: student.gradeId,
    gradeChangedOn: student.gradeChangedOn,
    limitedEnglishProficiencyID: student.engProfId,
    ethnicityID: student.ethnicityId,
    ecoDisadvantagedID: student.disadvId,
    specialEdStatusID: student.specialEdId,
    genderID: student.genderId,
    reflexJson: student.reflexJson,
    fracJson: student.fracJson,
    licenses: student.licenses,
    hasParent: student.hasParent
  }));
}
function formatTeachers(rawUsers) {
  function teacherFilter(u) {
    return (typeof u.roleID === "undefined" || u.roleID === 3) && !u.isDeleted;
  }
  return (rawUsers || []).filter(teacherFilter).map(formatNonStudent);
}
function formatAdmins(rawUsers) {
  function adminFilter(u) {
    return (typeof u.roleID === "undefined" || u.roleID === 5) && !u.isDeleted;
  }
  return (rawUsers || []).filter(adminFilter).map(formatNonStudent);
}
function formatInstitutions(rawInstitutions) {
  return (rawInstitutions || []).map((institution) => ({
    id: institution.institutionID,
    name: institution.name,
    parentId: institution.parentInstitutionID,
    typeId: institution.institutionTypeID,
    location: {
      city: institution.city,
      state: institution.stateCode,
      country: institution.countryCode
    },
    settings: {
      allowStudentEnrollmentByTeachers: institution.allowRolesToEnrollStudents,
      defaultLanguageId: institution.defaultLanguageID
    },
    startOfSchool: {
      month: institution.startOfSchoolMonth,
      day: institution.startOfSchoolDay
    },
    products: (institution.products || []).map((product) => ({
      id: product.productID,
      seatsUsed: product.seatsUsed,
      seatsCap: product.seatsCap
    }))
  }));
}
function formatClasses(rawClasses) {
  return (rawClasses || []).map((rawClass) => __assign(__assign({}, formatEntity(__assign(__assign({}, rawClass), {id: rawClass.classID}))), {
    name: rawClass.className,
    shortName: rawClass.classShortName,
    ownerId: rawClass.ownerLoginID,
    teacherIds: rawClass.teacherLoginIDsList || [rawClass.ownerLoginID],
    studentIds: rawClass.studentLoginIDsList || [],
    isRostered: rawClass.classRostered,
    startDate: rawClass.startDate,
    endDate: rawClass.endDate,
    enrollmentCode: rawClass.enrollmentCode
  }));
}
function formatSubscriptions(rawSubscriptions) {
  return (rawSubscriptions || []).map((rawSub) => __assign(__assign({}, formatEntity(__assign(__assign({}, rawSub), {id: rawSub.subscriptionID}))), {
    name: rawSub.subscriptionName,
    notes: rawSub.notes,
    isActive: rawSub.isActive,
    isExpired: rawSub.isExpired,
    tenantId: rawSub.tenantID,
    licensingTypeId: rawSub.licensingTypeID,
    productId: rawSub.productID,
    sourceId: rawSub.sourceID,
    salesForceContract: {
      id: rawSub.salesForceContractID,
      number: rawSub.salesForceContractNumber
    },
    settings: {
      startsOn: rawSub.startsOn,
      expiresOn: rawSub.expiresOn,
      enforceStartDate: rawSub.enforceStartDate,
      gracePeriod: rawSub.gracePeriod,
      isSsoLtiEnabled: rawSub.isSSOLTIEnabled,
      isSsoSamlEnabled: rawSub.isSSOSamlEnabled,
      isRosterEnabled: rawSub.isRosterEnabled,
      lengthInDays: rawSub.lengthInDays
    },
    pendingSubscription: {
      id: rawSub.pendingSubscriptionID,
      effectiveOn: rawSub.pendingEffectiveOn
    }
  }));
}

// src/index.ts
var import_logger = __toModule(require_bundle2());

// package.json
var name = "@explorelearning/platform-rest-api";
var version = "1.10.19";
var description = "library for interacting with the Platform REST API";
var main = "dist/bundle.js";
var types = "dist/types/index.d.ts";
var files = [
  "/dist"
];
var scripts = {
  build: "node ../../helpers/build.js --external=@explorelearning/base-api",
  "build:types": "npx tsc",
  test: "npx jest"
};
var repository = {
  type: "git",
  url: "git+https://github.com/ExploreLearning/el-web.git"
};
var author = "Brian McMillen <brian.mcmillen@explorelearning.com>";
var license = "ISC";
var bugs = {
  url: "https://github.com/ExploreLearning/el-web/issues"
};
var homepage = "https://github.com/ExploreLearning/el-web#readme";
var devDependencies = {
  "@explorelearning/base-api": "^1.10.19",
  "@explorelearning/logger": "^1.10.15",
  "@explorelearning/urls": "^1.10.15",
  axios: "0.21.1"
};
var peerDependencies = {
  "@explorelearning/base-api": "^1.10.6",
  "@explorelearning/logger": "^1.10.7",
  "@explorelearning/urls": "^1.10.4",
  axios: "0.21.1"
};
var gitHead = "e474bc856a8276bbc47c73a2a2ee69523319148e";
var package_default = {
  name,
  version,
  description,
  main,
  types,
  files,
  scripts,
  repository,
  author,
  license,
  bugs,
  homepage,
  devDependencies,
  peerDependencies,
  gitHead
};

// src/index.ts
import_logger.versionTag(package_default);
function serialize(obj) {
  const query = Object.keys(obj).reduce((acc, key) => {
    var _a;
    if (obj.hasOwnProperty(key) && ((_a = obj[key]) != null ? _a : false)) {
      acc = acc ? acc + "&" : "";
      acc += encodeURIComponent(key) + "=" + encodeURIComponent(obj[key]);
    }
    return acc;
  }, "");
  return query ? "?" + query : "";
}
var MissingModelError = class extends Error {
  constructor(message) {
    super("Model must be fetched before this request can be made; " + message);
    this.name = "MissingModelError";
  }
};
var LicenseMap = {
  1: "Site",
  2: "Teacher",
  3: "Trial",
  4: "Complimentary",
  5: "Pilot",
  6: "Employee Free Teacher",
  7: "Employee Seed Program",
  8: "Grant",
  9: "Home"
};
var PlatformRestApi = class extends import_base_api.default {
  constructor({auth = null, errorCodeCallbacks = {}, baseURL = ""} = {}) {
    const defaultBaseURL = import_urls.default.getUrls().platformApi;
    super({
      auth,
      errorCodeHandlers: errorCodeCallbacks,
      baseURL: baseURL || defaultBaseURL + "/platform"
    });
    this.defaultBaseURL = defaultBaseURL;
  }
  login(params) {
    const {username, password, url} = params;
    return this.api({
      method: "POST",
      baseURL: this.defaultBaseURL,
      url: url || "auth/login/admin",
      data: {username, password}
    });
  }
  logout({baseUrl = ""} = {}) {
    return this.api({
      baseURL: baseUrl || this.defaultBaseURL,
      url: "logout"
    });
  }
  fetchModel(params) {
    return __async(this, null, function* () {
      var _a, _b;
      const {institutionId, subscriptionId, isEmployee} = params || {};
      const id = parseInt(institutionId + "", 10);
      let url = id ? `model?institutionID=${id}` : "model";
      if (id && subscriptionId && isEmployee) {
        url += `&subscriptionID=${subscriptionId}`;
      }
      const rawModel = ((_b = (_a = yield this.api(url)) == null ? void 0 : _a.data) == null ? void 0 : _b.AdminClientModel) || {};
      const rawStudents = rawModel.parentStudents || rawModel.currentInstitutionStudents || [];
      const students = formatStudents(rawStudents);
      const teachers = formatTeachers(rawModel.currentInstitutionNonStudents);
      const administrators = formatAdmins(rawModel.currentInstitutionNonStudents);
      const users = {students, teachers, administrators};
      const institutions = formatInstitutions(rawModel.institutionList);
      const classes = formatClasses(rawModel.classModels);
      const subscriptions = formatSubscriptions(rawModel.subscriptions);
      const model = {users, institutions, classes, subscriptions};
      classes.forEach((c) => {
        c.studentIds = c.studentIds.filter((id2) => students.find((s) => s.id === id2));
      });
      this.currentModel = model;
      return model;
    });
  }
  fetchStudentModel() {
    return __async(this, null, function* () {
      var _a, _b;
      const rawModel = ((_b = (_a = yield this.api("model/student")) == null ? void 0 : _a.data) == null ? void 0 : _b.StudentClientModel) || {};
      return {
        institutions: formatInstitutions(rawModel.institutionModels),
        classes: formatClasses(rawModel.classModels)
      };
    });
  }
  fetchSeatCount(params) {
    return __async(this, null, function* () {
      var _a, _b;
      const {institutionId, subscriptionId} = params;
      const url = `subscriptionMember/${subscriptionId}/seats/${institutionId}`;
      return (_b = (_a = yield this.api(url)) == null ? void 0 : _a.data) == null ? void 0 : _b.Integer;
    });
  }
  fetchRegCodes(params) {
    return __async(this, null, function* () {
      const {institutionId, subscriptionIds} = params;
      const url = `regcode/institution/${institutionId}`;
      const calls = subscriptionIds.map((id) => this.api(`${url}/${id}`));
      const responses = yield Promise.all(calls);
      return responses.reduce((acc, response) => {
        var _a;
        acc = acc.concat((_a = response == null ? void 0 : response.data) == null ? void 0 : _a.ArrayList);
        return acc;
      }, []);
    });
  }
  createRegCode(params) {
    return __async(this, null, function* () {
      var _a, _b;
      const {institutionId, subscriptionId, productId, roleId, maxUses} = params;
      const code = (_b = (_a = yield this.api.post("regcode/invite", {
        institutionID: institutionId,
        subscriptionID: subscriptionId,
        productID: productId,
        roleID: roleId,
        maxUses
      })) == null ? void 0 : _a.data) == null ? void 0 : _b.RegCode;
      return code;
    });
  }
  setRegCodeUses(params) {
    return __async(this, null, function* () {
      var _a, _b;
      const {regCode, maxUses, isEmployee, institutionId, subscriptionId, productId, loginId} = params;
      const payload = isEmployee ? {regCode, maxUses} : {
        regCode,
        maxUses,
        institutionID: institutionId,
        subscriptionID: subscriptionId,
        productID: productId,
        loginID: loginId
      };
      const call = this.api.put("regcode", payload);
      return (_b = (_a = yield call) == null ? void 0 : _a.data) == null ? void 0 : _b.RegCode;
    });
  }
  sendRegCodeEmail(params) {
    const {institutionId, subscriptionId, productId, roleId, emails} = params;
    return this.api.post("email/invite", {
      institutionID: institutionId,
      subscriptionID: subscriptionId,
      productID: productId,
      roleID: roleId,
      emails
    });
  }
  sendConfirmationEmail(params) {
    const {loginId} = params;
    return this.api.get(`email/validate?loginID=${loginId}`);
  }
  createUser(params) {
    return __async(this, null, function* () {
      var _a, _b;
      const url = `login/nonstudent/institution/${params.institutionId}`;
      const languageID = parseInt(params.languageId + "", 10) || 1;
      return (_b = (_a = yield this.api.post(url, {
        tenantID: params.tenantId,
        roleID: params.roleId,
        username: params.username,
        firstname: params.firstName,
        middlename: params.middleName,
        lastname: params.lastName,
        titleID: params.titleId,
        email: params.email,
        sisUserID: params.sisUserId,
        languageID,
        isValidEmail: params.isValidEmail,
        isSubscribedToEmails: params.isSubscribedToEmails
      })) == null ? void 0 : _a.data) == null ? void 0 : _b.Long;
    });
  }
  updateUsers(params) {
    return __async(this, null, function* () {
      const {institutionId, tenantId, users} = params;
      if (!this.currentModel) {
        throw new MissingModelError();
      }
      const url = `login/nonstudent/institution/${institutionId}`;
      const {administrators, teachers} = this.currentModel.users;
      const nonStudents = [...administrators, ...teachers];
      const updatedModelUsers = users.map((user) => {
        const modelUser = nonStudents.find((ns) => ns.id === user.id) || {};
        return Object.keys(modelUser).reduce((acc, key) => {
          var _a;
          acc[key] = (_a = user[key]) != null ? _a : modelUser[key];
          return acc;
        }, {});
      });
      const calls = updatedModelUsers.map((user) => {
        return this.api.put(url, __assign(__assign({}, unformatNonStudent(user)), {
          tenantID: tenantId
        }));
      });
      yield Promise.all(calls);
    });
  }
  deleteUsers(params) {
    return __async(this, null, function* () {
      const {institutionId, userIds} = params;
      const url = `login/institution/${institutionId}`;
      yield this.api.delete(url, {data: userIds});
    });
  }
  createClass(params) {
    return __async(this, null, function* () {
      var _a, _b;
      const {institutionId, productId, ownerId, name: name2, externalId} = params;
      const classData = {productID: productId, ownerID: ownerId, className: name2};
      const payload = (externalId != null ? externalId : false) ? classData : __assign(__assign({}, classData), {externalID: externalId});
      const url = `class/institution/${institutionId}`;
      const response = yield this.api.post(url, payload);
      const classId = ((_a = response == null ? void 0 : response.data) == null ? void 0 : _a.Long) || ((_b = response == null ? void 0 : response.data) == null ? void 0 : _b.Integer);
      return classId;
    });
  }
  updateClass(params) {
    return __async(this, null, function* () {
      const {id, institutionId, productId, ownerId, name: name2, externalId} = params;
      const classData = {classID: id, productID: productId, ownerLoginID: ownerId, className: name2};
      const payload = (externalId != null ? externalId : false) ? classData : __assign(__assign({}, classData), {externalID: externalId});
      const url = `class/institution/${institutionId}`;
      yield this.api.put(url, payload);
    });
  }
  deleteClass(params) {
    return __async(this, null, function* () {
      const {institutionId, id} = params;
      yield this.api.delete(`class/${id}/institution/${institutionId}`);
    });
  }
  addStudentsToClass(params) {
    return __async(this, null, function* () {
      const {institutionId, classId, studentIds} = params;
      const url = `class/${classId}/institution/${institutionId}/students`;
      yield this.api.post(url, studentIds);
    });
  }
  removeStudentsFromClass(params) {
    return __async(this, null, function* () {
      const {institutionId, classId, studentIds} = params;
      yield this.api({
        method: "delete",
        url: `class/${classId}/institution/${institutionId}/students`,
        data: studentIds
      });
    });
  }
  addTeachersToClass(params) {
    return __async(this, null, function* () {
      const {classId, teacherIds} = params;
      const url = `class/${classId}/teachers`;
      yield this.api.post(url, teacherIds);
    });
  }
  removeTeachersFromClass(params) {
    return __async(this, null, function* () {
      const {classId, teacherIds} = params;
      yield this.api({
        method: "delete",
        url: `class/${classId}/teachers`,
        data: teacherIds
      });
    });
  }
  fetchStudentsById(params) {
    return __async(this, null, function* () {
      var _a;
      const {studentIds, tenantId} = params;
      const query = serialize({tenantID: tenantId});
      const response = yield this.api.post(`login/student/SISID${query}`, studentIds);
      const rawStudents = (_a = response == null ? void 0 : response.data) == null ? void 0 : _a.ArrayList;
      return formatStudents(rawStudents);
    });
  }
  fetchStudentsByInstitution(params) {
    return __async(this, null, function* () {
      var _a;
      const {institutionId} = params;
      const response = yield this.api(`institution/${institutionId}/students`);
      const rawStudents = (_a = response == null ? void 0 : response.data) == null ? void 0 : _a.ArrayList;
      return formatStudents(rawStudents);
    });
  }
  fetchTeachersByInstitution(params) {
    return __async(this, null, function* () {
      var _a;
      const {institutionId} = params;
      const response = yield this.api(`institution/${institutionId}/teachers`);
      const rawTeachers = (_a = response == null ? void 0 : response.data) == null ? void 0 : _a.ArrayList;
      return formatTeachers(rawTeachers);
    });
  }
  updateInstitution(params) {
    return __async(this, null, function* () {
      const {tenantId, id, typeId, startOfSchool, settings} = params;
      const {month, day} = startOfSchool;
      const {allowStudentEnrollmentByTeachers, defaultLanguageId} = settings;
      yield this.api.post(`institution/${id}/settings`, {
        tenantID: tenantId,
        institutionID: id,
        institutionTypeID: typeId,
        startOfSchoolMonth: month,
        startOfSchoolDay: day,
        defaultLanguageID: defaultLanguageId,
        allowRolesToEnrollStudents: allowStudentEnrollmentByTeachers
      });
    });
  }
  fetchProfile() {
    return __async(this, null, function* () {
      var _a, _b;
      const profile = (_b = (_a = yield this.api("login/self")) == null ? void 0 : _a.data) == null ? void 0 : _b.Login;
      return formatNonStudent(profile);
    });
  }
  updateProfile(params) {
    return __async(this, null, function* () {
      yield this.api.put("login/self", {
        username: params.username,
        firstname: params.firstName,
        middlename: params.middleName,
        lastname: params.lastName,
        titleID: params.titleId,
        email: params.email,
        languageID: params.languageId,
        isSubscribedToEmails: params.isSubscribedToEmails
      });
    });
  }
  createStudents(params) {
    return __async(this, null, function* () {
      var _a;
      const {institutionId, tenantId, students} = params;
      const rawStudents = unformatStudents(students);
      rawStudents.forEach((s) => {
        s.tenantID = tenantId;
        s.languageID = parseInt(s.languageID + "", 10) || 1;
      });
      const url = `login/students/institution/${institutionId}`;
      const response = yield this.api.post(url, rawStudents);
      const responseArr = (_a = response == null ? void 0 : response.data) == null ? void 0 : _a.ArrayList;
      let rawInstitutionStudents = [];
      const needAllStudents = !!responseArr.find((i) => !i.login);
      if (needAllStudents) {
        const institutionStudents = yield this.fetchStudentsByInstitution({institutionId});
        rawInstitutionStudents = unformatStudents(institutionStudents);
      }
      responseArr.forEach((i) => {
        let rawStudent;
        if (i.login) {
          const student = students.find((s) => s.sisUserId == i.sisUserID);
          Object.assign(student, i.login);
          rawStudent = unformatStudents([student])[0];
        } else {
          rawStudent = rawInstitutionStudents.find((s) => s.sisUserID == i.sisUserID);
        }
        const studentIndex = rawStudents.findIndex((s) => s.sisUserID === rawStudent.sisUserID);
        rawStudents[studentIndex] = rawStudent;
      });
      return rawStudents;
    });
  }
  updateStudents(params) {
    return __async(this, null, function* () {
      const {institutionId, tenantId, students} = params;
      if (!this.currentModel) {
        throw new MissingModelError();
      }
      const modelStudents = this.currentModel.users.students;
      const updatedModelStudents = students.map((student) => {
        const modelStudent = modelStudents.find((s) => s.id + "" === student.id + "") || {};
        return Object.keys(modelStudent).reduce((acc, key) => {
          var _a;
          acc[key] = (_a = student[key]) != null ? _a : modelStudent[key];
          return acc;
        }, {});
      });
      const updatedRawStudents = unformatStudents(updatedModelStudents);
      const payload = updatedRawStudents.map((student) => {
        var _a, _b;
        return __assign(__assign({}, student), {
          tenantID: tenantId,
          roleID: 2,
          displayName: (_a = student.displayName) != null ? _a : "",
          profileMessage: (_b = student.profileMessage) != null ? _b : ""
        });
      });
      const url = `login/students/institution/${institutionId}`;
      yield this.api.post(url, payload);
    });
  }
  deleteStudents(params) {
    return __async(this, null, function* () {
      const {institutionId, studentIds} = params;
      const url = `login/institution/${institutionId}`;
      yield this.api.delete(url, {data: studentIds});
    });
  }
  transferStudents(params) {
    return __async(this, null, function* () {
      const {institutionId, students} = params;
      const url = `login/transfer/institution/${institutionId}`;
      yield this.api.post(url, students);
    });
  }
  addStudentToParent(params) {
    return __async(this, null, function* () {
      var _a;
      const {parentId, studentId, password} = params;
      const url = `login/parent/student?parentLoginID=${parentId}`;
      const response = yield this.api.put(url, {loginID: studentId, password});
      const rawStudent = (_a = response == null ? void 0 : response.data) == null ? void 0 : _a.LoginStudent;
      const student = formatStudents([rawStudent])[0];
      return student;
    });
  }
  removeStudentFromParent(params) {
    return __async(this, null, function* () {
      const {parentId, studentId} = params;
      yield this.api.put(`login/parent/student/${studentId}`, {parentID: parentId});
    });
  }
  addStudentsToProduct(params) {
    return __async(this, null, function* () {
      const {productId, institutionId, studentIds, tenantId, subscriptionId} = params;
      const url = `login/product/${productId}/institution/${institutionId}`;
      const query = serialize({tenantID: tenantId, subscriptionID: subscriptionId});
      yield this.api.post(url + query, studentIds);
    });
  }
  removeStudentsFromProduct(params) {
    return __async(this, null, function* () {
      const {productId, institutionId, studentIds, tenantId, subscriptionId} = params;
      const url = `login/product/${productId}/institution/${institutionId}`;
      const query = serialize({tenantID: tenantId, subscriptionID: subscriptionId});
      yield this.api.delete(url + query, {data: studentIds});
    });
  }
  enrollStudentsInClass(params) {
    return __async(this, null, function* () {
      const {institutionId, classId, studentIds, productId} = params;
      const addToClass = this.addStudentsToClass({institutionId, studentIds, classId});
      const addToProduct = this.addStudentsToProduct({institutionId, studentIds, productId});
      yield Promise.all([addToClass, addToProduct]);
    });
  }
  searchSubscriptions(params) {
    return __async(this, null, function* () {
      const {type, value} = params;
      const payload = {searchType: type, searchValue: value};
      const {data} = yield this.api.post("subscription/search", payload);
      return data.ArrayList.map((item) => {
        return __assign(__assign({}, item), {
          id: item.subscriptionID,
          name: item.subscriptionName || "",
          licenseType: LicenseMap[item.licensingTypeID] || "",
          expires: item.expiresOn,
          quality: item.isExpired ? "bad" : ""
        });
      });
    });
  }
  searchInstitutions(params) {
    return __async(this, null, function* () {
      const {type, value} = params;
      let payload, privateSchools;
      if (type === "Location") {
        const parts = value.split(",");
        const state = parts[1];
        privateSchools = parts[2] === "Private";
        payload = parts[1] !== "undefined" ? {searchType: "StateAdmin", searchValue: state} : {searchType: "CountryAdmin", searchValue: parts[0]};
      } else {
        payload = {searchType: type, searchValue: value};
      }
      const response = yield this.api.post("institution/search", payload);
      let institutions = response.data.ArrayList;
      if (typeof privateSchools !== "undefined") {
        institutions = privateSchools ? institutions.filter((i) => i.institutionTypeID === 5) : institutions.filter((i) => i.institutionTypeID !== 5);
      }
      return institutions.map((item) => {
        return __assign(__assign({}, item), {
          id: item.institutionID,
          name: item.name || item.institutionName,
          city: item.city || "",
          state: item.stateCode || ""
        });
      });
    });
  }
  searchLoginsBySubscription(params) {
    return __async(this, null, function* () {
      const url = `login/search?subscriptionID=${params.subscriptionId}`;
      const response = yield this.api.post(url, {searchType: params.type, searchValue: params.value});
      const users = response.data.ArrayList;
      const students = formatStudents(users.filter((i) => +i.roleID === 2));
      const nonStudents = users.filter((i) => +i.roleID !== 2).map((u) => formatNonStudent(u));
      return {students, nonStudents};
    });
  }
};
var src_default = PlatformRestApi;
