import { Platform } from './platform';
/**
 * The export types for the parameters used in the request methods
 */
export declare namespace Params {
    type Id = number | string;
    type TenantId = Id;
    type InstitutionId = Id;
    type SubscriptionId = Id;
    type SubscriptionIds = Array<SubscriptionId>;
    type ProductId = Id;
    type RoleId = Id;
    type LoginId = Id;
    type IsEmployee = boolean;
    type MaxUses = number | string;
    type Email = string;
    type Emails = Array<Email>;
    type RegCodeString = string;
    type Username = string;
    type FirstName = string;
    type MiddleName = string;
    type LastName = string;
    type ClassName = string;
    type TitleId = Id;
    type SisUserId = Id;
    type LanguageId = Id;
    type IsValidEmail = boolean;
    type IsSubscribedToEmails = boolean;
    type IsDeleted = boolean;
    type ClassId = Id;
    type OwnerId = Id;
    type ExternalId = Id;
    type Password = string;
    type Login = {
        username: string;
        password: string;
        url?: string;
    };
    type FetchModel = {
        institutionId?: InstitutionId;
        subscriptionId?: SubscriptionId;
        isEmployee: IsEmployee;
    };
    type FetchSeatCount = {
        institutionId: InstitutionId;
        subscriptionId: SubscriptionId;
    };
    type FetchRegCodes = {
        institutionId: InstitutionId;
        subscriptionIds: SubscriptionIds;
    };
    type BaseRegCode = {
        institutionId: InstitutionId;
        subscriptionId: SubscriptionId;
        productId: ProductId;
        roleId: RoleId;
    };
    type CreateRegCode = BaseRegCode & {
        maxUses: MaxUses;
    };
    type SendRegCodeEmail = BaseRegCode & {
        emails: Emails;
    };
    type SetRegCodeUses = {
        regCode: RegCodeString;
        maxUses: MaxUses;
        isEmployee: IsEmployee;
        institutionId?: InstitutionId;
        subscriptionId?: SubscriptionId;
        productId?: ProductId;
        loginId?: LoginId;
    };
    type SendConfirmationEmail = {
        loginId: LoginId;
    };
    type CreateUser = Platform.NonStudent & {
        tenantId: TenantId;
        institutionId: InstitutionId;
    };
    type UpdateUsers = {
        tenantId: TenantId;
        institutionId: InstitutionId;
        users: Platform.NonStudent[];
    };
    type DeleteUsers = {
        institutionId: InstitutionId;
        userIds: LoginId[];
    };
    type CreateClass = {
        institutionId: InstitutionId;
        productId: ProductId;
        ownerId: OwnerId;
        name: ClassName;
        externalId?: ExternalId;
    };
    type UpdateClass = CreateClass & {
        id: ClassId;
    };
    type DeleteClass = {
        institutionId: InstitutionId;
        id: ClassId;
    };
    type AddStudentsToClass = {
        institutionId: InstitutionId;
        classId: ClassId;
        studentIds: LoginId[];
    };
    type RemoveStudentsFromClass = {
        institutionId: InstitutionId;
        classId: ClassId;
        studentIds: LoginId[];
    };
    type AddTeachersToClass = {
        classId: ClassId;
        teacherIds: LoginId[];
    };
    type RemoveTeachersFromClass = {
        classId: ClassId;
        teacherIds: LoginId[];
    };
    type FetchStudentsById = {
        studentIds: LoginId[];
        tenantId: TenantId;
    };
    type FetchStudentsByInstitution = {
        institutionId: InstitutionId;
    };
    type FetchTeachersByInstitution = {
        institutionId: InstitutionId;
    };
    type UpdateInstitution = Platform.Institution & {
        tenantId: TenantId;
    };
    type UpdateProfile = Platform.NonStudent;
    type CreateStudents = {
        institutionId: InstitutionId;
        tenantId: TenantId;
        students: Platform.Student[];
    };
    type UpdateStudents = {
        institutionId: InstitutionId;
        tenantId: TenantId;
        students: Platform.Student[];
    };
    type DeleteStudents = {
        institutionId: InstitutionId;
        studentIds: LoginId[];
    };
    type TransferStudents = {
        institutionId: InstitutionId;
        students: Platform.Student[];
    };
    type AddStudentsToParent = {
        parentId: LoginId;
        studentId: LoginId;
        password: Password;
    };
    type RemoveStudentsFromParent = {
        parentId: LoginId;
        studentId: LoginId;
    };
    type AddStudentsToProduct = {
        productId: ProductId;
        institutionId: InstitutionId;
        studentIds: LoginId[];
        tenantId?: TenantId;
        subscriptionId?: SubscriptionId;
    };
    type RemoveStudentsFromProduct = {
        productId: ProductId;
        institutionId: InstitutionId;
        studentIds: LoginId[];
        tenantId?: TenantId;
        subscriptionId?: SubscriptionId;
    };
    type EnrollStudentsInClass = AddStudentsToClass & AddStudentsToProduct;
    type SearchSubscriptions = {
        type: 'ContractNumber' | 'SubscriptionName' | 'InstitutionName' | 'HierarchyID';
        value: string;
    };
    type SearchInstitutions = {
        type: 'Location' | 'Name' | 'HierarchyID';
        value: string;
    };
    type SearchLoginsBySubscription = {
        type: 'TenantID';
        value: Id;
        subscriptionId: Id;
    };
}
