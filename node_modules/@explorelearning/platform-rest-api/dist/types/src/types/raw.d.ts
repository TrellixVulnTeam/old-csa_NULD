/**
 * The types for the raw response data returned from the server
 */
export declare namespace Raw {
    type BaseEntity = {
        id?: number;
        createdByID?: number;
        createdByUserID?: number;
        createdOn?: string;
        createdOnLong?: string;
        modifiedByID?: number;
        modifiedByUserID?: number;
        modifiedOn?: string;
        modifiedOnLong?: string;
    };
    type BaseUser = BaseEntity & {
        lastLoginOn: string;
        loginID: number;
        username: string;
        firstname: string;
        middlename: string;
        lastname: string;
        titleID: number;
        roleID: number;
        email: string;
        isValidEmail: boolean;
        isSubscribedToEmails: boolean;
        sisUserID: string;
        isDeleted: boolean;
        userRostered: boolean;
        licenses: number[];
        matchingLicenses: number[];
        displayName?: string;
        languageID?: number;
        langID?: number;
        tenantID?: number | string;
        profileMessage?: string;
        passwordClear?: string;
        cleverID?: number;
        ltiUserID?: string;
        samlUserID?: string;
    };
    type NonStudent = BaseUser & {
        showSchool: boolean;
        profilePicture?: string;
    };
    type Student = BaseUser & {
        password?: string;
        gradeID?: number;
        gradeLevelID?: number;
        gradeChangedOn: string;
        limitedEnglishProficiencyID: number;
        ethnicityID: number;
        ecoDisadvantagedID: number;
        specialEdStatusID: number;
        genderID: number;
        reflexJson: string;
        fracJson: string;
        hasParent: boolean;
        userID?: string;
        institutionID?: number;
        institutionName?: string;
        login?: Record<string, unknown>;
    };
    type Teacher = NonStudent;
    type Admin = NonStudent;
    type Institution = {
        institutionID: number;
        name: string;
        parentInstitutionID: number;
        institutionTypeID: number;
        city: string;
        stateCode: string;
        countryCode: string;
        allowRolesToEnrollStudents: boolean;
        defaultLanguageID: number;
        startOfSchoolMonth: number;
        startOfSchoolDay: number;
        products: Raw.Product[];
    };
    type Product = {
        productID: number;
        seatsUsed: number;
        seatsCap: number;
    };
    type Class = BaseEntity & {
        classID: number;
        className: string;
        classShortName: string;
        startDate: string;
        endDate: string;
        enrollmentCode: string;
        ownerLoginID: number;
        teacherLoginIDsList: number[];
        studentLoginIDsList: number[];
        classRostered: boolean;
    };
    type SubscriptionMember = BaseEntity & {
        subscriptionID: number;
        institutionID: number;
        seatsCap: number;
        seatsUsed: number;
        teachersCap: number;
        tenantID: number;
        institutionTypeID: number;
        institutionName: string;
        parentInstitutionID: number;
        stateCode: string;
        countryCode: string;
        city: string;
        enrollment: number;
        allowRolesToEnrollStudents: boolean;
        startOfSchoolDay: number;
        startOfSchoolMonth: number;
        defaultLanguageID: number;
        externalSchoolID: string;
    };
    type Subscription = BaseEntity & {
        subscriptionID: number;
        subscriptionName: string;
        notes: string;
        isActive: boolean;
        isExpired: boolean;
        tenantID: number;
        licensingTypeID: number;
        productID: number;
        sourceID: number;
        salesForceContractID: string;
        salesForceContractNumber: string;
        startsOn: string;
        expiresOn: string;
        enforceStartDate: boolean;
        gracePeriod: number;
        isSSOLTIEnabled: boolean;
        isSSOSamlEnabled: boolean;
        isRosterEnabled: boolean;
        lengthInDays: number;
        pendingSubscriptionID: number;
        pendingEffectiveOn: string;
        teachersCap: number;
        teachersUsed: number;
        upgradeAllowed: boolean;
        subscriptionMemberList?: SubscriptionMember[];
        extraSubscriptionAccessJson?: string;
    };
}
