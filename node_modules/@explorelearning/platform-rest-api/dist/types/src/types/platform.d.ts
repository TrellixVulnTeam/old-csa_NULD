/**
 * The types for the platform objects
 */
export declare namespace Platform {
    /**
     * A product with associated id and the seat count info
     */
    type Product = {
        id: number;
        seatsUsed: number;
        seatsCap: number;
    };
    /**
     * Indicates the time of an event and the id of the user associated with that event
     */
    type UserTimestamp = {
        loginId: number;
        timestamp: string;
    };
    /**
     * Base-level entity properties for object returned from the platform
     */
    type BaseEntity = {
        id: number;
        created?: UserTimestamp;
        modified?: UserTimestamp;
    };
    /**
     * Base-level information for a user on the platform
     */
    type BaseUser = BaseEntity & {
        lastLogin: string;
        username: string;
        firstName: string;
        middleName: string;
        lastName: string;
        sisUserId: string;
        languageId: number;
        isDeleted: boolean;
        isRostered: boolean;
        licenses: number[];
        matchingLicenses: number[];
        titleId: number;
        roleId: number;
        email: string;
        isValidEmail: boolean;
        isSubscribedToEmails: boolean;
        tenantId?: number;
        displayName?: string;
        profileMessage?: string;
        passwordClear?: string;
        isCleverEnabled?: boolean;
        isLtiEnabled?: boolean;
        isSamlEnabled?: boolean;
    };
    /**
     * A student user of the application
     */
    type Student = BaseUser & {
        gradeId: number;
        gradeChangedOn: string;
        engProfId: number;
        ethnicityId: number;
        disadvId: number;
        specialEdId: number;
        genderId: number;
        reflexJson: string;
        fracJson: string;
        hasParent: boolean;
        password?: string;
        institutionId?: number;
        institutionName?: string;
    };
    /**
     * A non-student user of the application
     */
    type NonStudent = BaseUser & {
        showSchool: boolean;
        profilePicture?: string;
    };
    type Teacher = NonStudent;
    type Administrator = NonStudent;
    /**
     * An institution on the platform containing related info, settings, and available products
     */
    type Institution = {
        id: number;
        name: string;
        parentId: number;
        typeId: number;
        location: {
            city: string;
            state: string;
            country: string;
        };
        startOfSchool: {
            month: number;
            day: number;
        };
        settings: {
            allowStudentEnrollmentByTeachers: boolean;
            defaultLanguageId: number;
        };
        products?: Product[];
    };
    /**
     * A class representation, containing class info and related student and teacher ids
     */
    type Class = BaseEntity & {
        id: number;
        name: string;
        shortName: string;
        ownerId: number;
        teacherIds: number[];
        studentIds: number[];
        isRostered: boolean;
        startDate: string;
        endDate: string;
        enrollmentCode: string;
    };
    /**
     * A subscription giving access to a product on the platform
     */
    type Subscription = BaseEntity & {
        name: string;
        notes: string;
        isActive: boolean;
        isExpired: boolean;
        tenantId: number;
        licensingTypeId: number;
        productId: number;
        sourceId: number;
        salesForceContract: {
            id: string;
            number: string;
        };
        settings: {
            startsOn: string;
            expiresOn: string;
            enforceStartDate: boolean;
            gracePeriod: number;
            isSsoLtiEnabled: boolean;
            isSsoSamlEnabled: boolean;
            isRosterEnabled: boolean;
            lengthInDays: number;
        };
        pendingSubscription: {
            id: number;
            effectiveOn: string;
        };
    };
    /**
     * The initial model data for an admin / teacher application interacting with the platform server
     */
    type Model = {
        users: {
            students: Student[];
            teachers: Teacher[];
            administrators: Administrator[];
        };
        institutions: Institution[];
        classes: Class[];
        subscriptions: Subscription[];
    };
    /**
     * The initial model data for a student application interacting with the platform server
     */
    type StudentModel = {
        institutions: Institution[];
        classes: Class[];
    };
}
