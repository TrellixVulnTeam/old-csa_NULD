import { Params } from './types/params';
import { Platform } from './types/platform';
import { Raw } from './types/raw';
import ElBaseApi from '@explorelearning/base-api';
declare class PlatformRestApi extends ElBaseApi {
    api: any;
    defaultBaseURL: string;
    constructor({ auth, errorCodeCallbacks, baseURL }?: {
        auth?: any;
        errorCodeCallbacks?: {};
        baseURL?: string;
    });
    /**
     * A reference to the most recent model retrieved from the backend (we should get the backend to allow PATCH requests so that we don't need this)
     */
    private currentModel;
    /**
     * Attempt to authenticate against the Platform. Defaults to using the url for the Platform's "admin" app, which is used for reporting and account services frontend apps. Does *not* use the `baseURL` value provided in the constructor (if one was provided), but uses the default url as provided from the `@explorelearning/urls` package.
     * @param {Params.Login} params
     * @return {Promise<any>} Promise that the login request will return with a response
     */
    login(params: Params.Login): Promise<any>;
    /**
     * Attempt to remove any authentication for the current session. Does *not* use the `baseURL` value provided in the constructor (if one was provided), but uses the default url as provided from the `@explorelearning/urls` package.
     * @return {Promise<any>} Promise that the logout request will return with a response
     */
    logout({ baseUrl }?: {
        baseUrl?: string;
    }): Promise<any>;
    /**
     * Fetch the model for an instituion, based on the authenticated teacher's or admin's account
     * @param {Params.FetchModel} params
     * @return {Platform.Model} The model for the institution
     */
    fetchModel(params: Params.FetchModel): Promise<Platform.Model>;
    /**
     * Fetch the model for a student, based on the authenticated student's account
     * @return {Platform.StudentModel} The model for the student
     */
    fetchStudentModel(): Promise<Platform.StudentModel>;
    /**
     * Fetch the seat count for a given institution and subscription
     * @param {ParamsFetchSeatCount} params
     * @return {Promise<number>} A promise with the seat count
     */
    fetchSeatCount(params: Params.FetchSeatCount): Promise<number>;
    /**
     * Fetch the registration codes associated with a given institution and subscription
     * @param {Params.FetchRegCodes} params
     * @return {Promise<RegCode[]>} A promise with an array of regcodes
     */
    fetchRegCodes(params: Params.FetchRegCodes): Promise<RegCode[]>;
    /**
     * Create a new registration code for a specified institution, subscription, product, and role
     * @param {Params.CreateRegCode} params
     * @return {Promise<RegCode>} A promise with the newly created registration code
     */
    createRegCode(params: Params.CreateRegCode): Promise<RegCode>;
    /**
     * Set the number of available uses for a specified regcode
     * @param {Params.SetRegCodeUses} params
     * @returns {Promise<RegCode>} A promise with the updated reg code
     */
    setRegCodeUses(params: Params.SetRegCodeUses): Promise<RegCode>;
    /**
     * Send emails to specified addresses containing a newly created registration code
     * @param {Params.SendRegCodeEmail} params
     * @return {Promise<void>} A promise that the emails will be sent
     */
    sendRegCodeEmail(params: Params.SendRegCodeEmail): Promise<void>;
    /**
     * Send an email to the address associated with the user's account so they can click a link to confirm the address
     * @param {Params.SendConfirmationEmail} params
     * @return {Promise<void>} A promise that the email will be sent
     */
    sendConfirmationEmail(params: Params.SendConfirmationEmail): Promise<void>;
    /**
     * Create a user on the platform
     * @param {Params.CreateUser} params
     * @return {Promise<number>} The ID of the newly created user
     */
    createUser(params: Params.CreateUser): Promise<number>;
    /**
     * Update users on the platform
     * @param {Params.UpdateUsers} params
     * @return {Promise<void>} A promise that the users will be updated
     */
    updateUsers(params: Params.UpdateUsers): Promise<void>;
    /**
     * Delete users on the platform by specified ids
     * @param {Params.DeleteUsers} params
     * @return {Promise<void>} A promise that the users will be deleted
     */
    deleteUsers(params: Params.DeleteUsers): Promise<void>;
    /**
     * Create a new class on the platform adding any specified teachers
     * @param {Params.CreateClass} params
     * @return {Promise<number>} A promise that the class will be created, resolving with the id of the newly created class
     */
    createClass(params: Params.CreateClass): Promise<number>;
    /**
     * Update a class on the platform
     * @param {Params.UpdateClass} params
     * @return {Promise<void>} A promise that the class will be updated
     */
    updateClass(params: Params.UpdateClass): Promise<void>;
    /**
     * Delete a class on the platform
     * @param {Params.DeleteClass} params
     * @return {Promise<void>} A promise that the class will be deleted
     */
    deleteClass(params: Params.DeleteClass): Promise<void>;
    /**
     * Add students (specified by id) to a specified class (specified by id)
     * @param {Params.AddStudentsToClass} params
     * @return {Promise<void>} A promise that the students will be added to the class
     */
    addStudentsToClass(params: Params.AddStudentsToClass): Promise<void>;
    /**
     * Remove students (specified by id) from a class (specified by id)
     * @param {Params.RemoveStudentsFromClass} params
     * @return {Promise<void>} A promise that the students will be removed from the class
     */
    removeStudentsFromClass(params: Params.RemoveStudentsFromClass): Promise<void>;
    /**
     * Add teachers (specified by id) to a specified class (specified by id)
     * @param {Params.AddTeacherToClass} params
     * @return {Promise<void>} A promise that the teachers will be added to the class
     */
    addTeachersToClass(params: Params.AddTeachersToClass): Promise<void>;
    /**
     * Remove teachers (specified by id) from a class (specified by id)
     * @param {Params.RemoveTeachersFromClass} params
     * @return {Promise<void>} A promise that the teachers will be removed from the class
     */
    removeTeachersFromClass(params: Params.RemoveTeachersFromClass): Promise<void>;
    /**
     * Fetch students on the platform by their associated ids
     * @param {Params.FetchStudentsById} params
     * @return {Promise<Platform.Student[]>} The array of students
     */
    fetchStudentsById(params: Params.FetchStudentsById): Promise<Platform.Student[]>;
    /**
     * Fetch all students from an institution (specified by id)
     * @param {Params.FetchStudentsByInstitution} params
     * @return {Promise<Platform.Student[]>} The array of students
     */
    fetchStudentsByInstitution(params: Params.FetchStudentsByInstitution): Promise<Platform.Student[]>;
    /**
     * Fetch all teachers from an institution (specified by id)
     * @param {Params.FetchTeachersByInstitution} params
     * @return {Promise<Platform.Teacher[]>} The array of teachers
     */
    fetchTeachersByInstitution(params: Params.FetchTeachersByInstitution): Promise<Platform.Teacher[]>;
    /**
     * Update an institution on the platform
     * NOTE: this call will update the institution immediately on the backend, but the model of the institution retrieved by the model call won't update for a few minutes, because it gets cached
     * @param {Params.UpdateInstitution} params
     * @return {Promise<void>} A promise that the institution will be updated
     */
    updateInstitution(params: Params.UpdateInstitution): Promise<void>;
    /**
     * Fetch the profile information for the currently logged-in user
     * @return {Promise<Platform.NonStudent>} A promise which resolves with the current user's profile
     */
    fetchProfile(): Promise<Platform.NonStudent>;
    /**
     * Update the profile for the currently logged-in user
     * @param {Params.UpdateProfile} params
     * @return {Promise<void>} A promise that the profile will be updated
     */
    updateProfile(params: Params.UpdateProfile): Promise<void>;
    /**
     * Create students on the platform
     * @param {Params.CreateStudents} params
     * @return {Promise<Raw.Student[]>} A promise resolving with the array of created user data
     */
    createStudents(params: Params.CreateStudents): Promise<Raw.Student[]>;
    /**
     * Update students on the platform
     * @param {Params.UpdateStudents} params
     * @return {Promise<void>} A promise that the students have been updated
     */
    updateStudents(params: Params.UpdateStudents): Promise<void>;
    /**
     * Delete students on the platform (specified by id)
     * @param {Params.DeleteStudents} params
     * @return {Proimse<void>} A promise that the students will be deleted
     */
    deleteStudents(params: Params.DeleteStudents): Promise<void>;
    /**
     * Transfer students on the platform to a specified institution (by id)
     * @param {Params.TransferStudents} params
     * @return {Proimse<void>} A promise that the students will be transfered
     */
    transferStudents(params: Params.TransferStudents): Promise<void>;
    /**
     * Associate a student account with a parent's account on the platform
     * @param {Params.AddStudentsToParent} params
     * @return {Promise<Platform.Student>} A promise resolving with the student added to the parent account
     */
    addStudentToParent(params: Params.AddStudentsToParent): Promise<Platform.Student>;
    /**
     * Unassociate a student account from a parent's account on the platform
     * @param {Params.RemoveStudentsFromParent} params
     * @return {Promise<void>} A promise that the student will be removed from the parent
     */
    removeStudentFromParent(params: Params.RemoveStudentsFromParent): Promise<void>;
    /**
     * Add a product license to the student's account
     * @param {Params.AddStudentsToProduct} params
     * @return {Promise<void>} A promise that the student will be added to the product
     */
    addStudentsToProduct(params: Params.AddStudentsToProduct): Promise<void>;
    /**
     * Remove a product license from the student's account
     * @param {Params.RemoveStudentsFromProduct} params
     * @return {Promise<void>} A promise that the student will be removed from the product
     */
    removeStudentsFromProduct(params: Params.RemoveStudentsFromProduct): Promise<void>;
    /**
     * Adds students (specified by id) to a specified class (specified by id) and enroll them with a product (specified by id). Simultaneously calls `addStudentsToClass` and `addStudentsToProduct`.
     * @param {Params.EnrollStudentsInClass} params
     * @return {Promise<void>} A promise that the students will be added to the specified class and product
     */
    enrollStudentsInClass(params: Params.EnrollStudentsInClass): Promise<void>;
    /**
     * Search for subscriptions based on a search type and value
     * @param {Params.SearchSubscriptions} params
     * @return {Promise<any[]>} A promise resolving with an array of subscription data matching the search query
     */
    searchSubscriptions(params: Params.SearchSubscriptions): Promise<any[]>;
    /**
     * Search for institutions based on a search type and value
     * @param {Params.SearchInstitutions} params
     * @return {Promise<any[]>} A promise resolving with an array of institution data matching the search query
     */
    searchInstitutions(params: Params.SearchInstitutions): Promise<any[]>;
    /**
     * Search for logins in a subscription based on a search type and value and the subscription's id
     * @param {Params.SearchLoginsBySubscription} params
     * @return {Promise<any>} A promise resolving with an object mapped to students and non-students matching the search query
     */
    searchLoginsBySubscription(params: Params.SearchLoginsBySubscription): Promise<any>;
}
declare type RegCode = Record<string, unknown>;
export default PlatformRestApi;
