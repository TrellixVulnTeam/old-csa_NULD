var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __commonJS = (callback, module2) => () => {
  if (!module2) {
    module2 = {exports: {}};
    callback(module2.exports, module2);
  }
  return module2.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, {get: all[name2], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true})), module2);
};

// ../logger/dist/bundle.js
var require_bundle = __commonJS((exports2) => {
  var __defProp2 = Object.defineProperty;
  var __markAsModule2 = (target) => __defProp2(target, "__esModule", {value: true});
  var __export2 = (target, all) => {
    for (var name22 in all)
      __defProp2(target, name22, {get: all[name22], enumerable: true});
  };
  __markAsModule2(exports2);
  __export2(exports2, {
    createLogger: () => createLogger,
    versionTag: () => versionTag2
  });
  var name2 = "@explorelearning/logger";
  var version2 = "1.10.15";
  var description2 = "Fancy logging in the browser console";
  var main2 = "dist/bundle.js";
  var types2 = "dist/types/index.d.ts";
  var files2 = [
    "/dist"
  ];
  var scripts2 = {
    build: "node ../../helpers/build.js",
    "build:types": "npx tsc",
    test: "npx jest"
  };
  var repository2 = {
    type: "git",
    url: "git+https://github.com/ExploreLearning/el-web.git"
  };
  var author2 = "Brian McMillen <brian.mcmillen@explorelearning.com>";
  var license2 = "ISC";
  var bugs2 = {
    url: "https://github.com/ExploreLearning/el-web/issues"
  };
  var homepage2 = "https://github.com/ExploreLearning/el-web#readme";
  var gitHead2 = "6198704a8ad8b90ac2ff6fa7c6a2350fca9e2de6";
  var package_default2 = {
    name: name2,
    version: version2,
    description: description2,
    main: main2,
    types: types2,
    files: files2,
    scripts: scripts2,
    repository: repository2,
    author: author2,
    license: license2,
    bugs: bugs2,
    homepage: homepage2,
    gitHead: gitHead2
  };
  function log(...params) {
    if (localStorage.getItem("debug") === "true")
      console.info(...params);
  }
  if (!window.ELLogger) {
    window.ELLogger = {
      versionTagMap: {}
    };
    window.addEventListener("load", () => {
      const {versionTagMap} = window.ELLogger;
      Object.keys(versionTagMap).forEach((name22) => {
        logVersionTag({name: name22, version: versionTagMap[name22]});
      });
    });
  }
  versionTag2(package_default2);
  function logVersionTag({name: name22, version: version22}) {
    log(`%c${name22}%cv${version22}`, "color: #fbf1c7; background: #458588; padding: 2px 4px; border-radius: 3px 0 0 3px;", "color: #fbf1c7; background: #d65d0e; padding: 2px 4px; border-radius: 0 3px 3px 0");
  }
  function versionTag2({name: name22, version: version22}) {
    window.ELLogger.versionTagMap[name22] = version22;
  }
  function createLogger(name22) {
    return (...params) => {
      log(`${name22}:
`, ...params);
    };
  }
});

// src/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => src_default
});
var import_logger = __toModule(require_bundle());

// package.json
var name = "@explorelearning/urls";
var version = "1.10.15";
var description = "Vue plugin for referencing common urls relative to the current domain name";
var main = "dist/bundle.js";
var types = "dist/types/index.d.ts";
var files = [
  "/dist"
];
var scripts = {
  build: "node ../../helpers/build.js && npm run markdown",
  "build:types": "npx tsc",
  markdown: "node ./helpers/generateMarkdown.js",
  test: "npx jest"
};
var repository = {
  type: "git",
  url: "git+https://github.com/ExploreLearning/el-web.git"
};
var author = "Brian McMillen <brian.mcmillen@explorelearning.com>";
var license = "ISC";
var bugs = {
  url: "https://github.com/ExploreLearning/el-web/issues"
};
var devDependencies = {
  "@explorelearning/logger": "^1.10.15"
};
var peerDependencies = {
  "@explorelearning/logger": "^0.0.1"
};
var homepage = "https://github.com/ExploreLearning/el-web#readme";
var gitHead = "6198704a8ad8b90ac2ff6fa7c6a2350fca9e2de6";
var package_default = {
  name,
  version,
  description,
  main,
  types,
  files,
  scripts,
  repository,
  author,
  license,
  bugs,
  devDependencies,
  peerDependencies,
  homepage,
  gitHead
};

// src/index.ts
import_logger.versionTag(package_default);
function getBaseUrl() {
  const {host} = window.location;
  const parts = host.split(".");
  const name2 = parts[parts.length - 2];
  return {
    elclouddev: "elclouddev.net",
    elcloudstage: "elcloudstage.net",
    explorelearning: "explorelearning.com"
  }[name2] || "elclouddev.net";
}
function getEnvName(baseUrl) {
  return {
    "elclouddev.net": "dev",
    "elcloudstage.net": "stage",
    "explorelearning.com": "prod"
  }[baseUrl || getBaseUrl()] || "dev";
}
function getUrls(baseUrl = "") {
  const base = baseUrl || process.env.EL_URLS_BASE || getBaseUrl();
  const services = process.env.EL_URLS_SERVICES || `https://services.${base}`;
  const content = process.env.EL_URLS_CONTENT || `https://content.${base}`;
  const apps = process.env.EL_URLS_APPS || `https://apps.${base}`;
  const platform = process.env.EL_URLS_PLATFORM || `${services}/platform`;
  const platformApi = process.env.EL_URLS_PLATFORM_API || `${platform}/api`;
  const auth = process.env.EL_URLS_AUTH || `${platform}/auth`;
  const reflexApi = process.env.EL_URLS_REFLEX_API || `${services}/reflex/api`;
  const fraxApi = process.env.EL_URLS_FRAX_API || `${services}/frax/api`;
  const fraxSocket = process.env.EL_URLS_FRAX_SOCKET || `${services}/fraxws/api/frax-websocket`;
  const gizmos = process.env.EL_URLS_GIZMOS || `${services}/gizmos`;
  const nextgen = process.env.EL_URLS_NEXTGEN || `${services}/nextgen`;
  const student = process.env.EL_URLS_STUDENT || `${content}/reflex/index.html`;
  const accounts = process.env.EL_URLS_ACCOUNTS || `${apps}/account`;
  const login = process.env.EL_URLS_LOGIN || `${accounts}/login/reflex/teacher`;
  const logout = process.env.EL_URLS_LOGOUT || `${accounts}/reflex/logout`;
  const t4mfLogout = process.env.EL_URLS_T4MF_LOGOUT || "https://www.time4learning.com/App/Resources/Time4MathFactsLogout.aspx";
  const envName = getEnvName(base);
  const nextgenAssets = process.env.EL_URLS_NEXTGEN_ASSETS || `https://s3.amazonaws.com/el-gizmos-${envName}`;
  return {
    accounts,
    apps,
    auth,
    base,
    content,
    fraxApi,
    fraxSocket,
    gizmos,
    login,
    logout,
    nextgen,
    nextgenAssets,
    platform,
    platformApi,
    reflexApi,
    services,
    student,
    t4mfLogout
  };
}
var src_default = {
  install(Vue) {
    Vue.prototype.$urls = getUrls();
  },
  getBaseUrl,
  getUrls,
  getEnvName
};
