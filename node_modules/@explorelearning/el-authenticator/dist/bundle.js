var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __commonJS = (callback, module2) => () => {
  if (!module2) {
    module2 = {exports: {}};
    callback(module2.exports, module2);
  }
  return module2.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, {get: all[name2], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true})), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (result) => {
      return result.done ? resolve(result.value) : Promise.resolve(result.value).then(fulfilled, rejected);
    };
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// ../urls/dist/bundle.js
var require_bundle = __commonJS((exports2) => {
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __markAsModule2 = (target) => __defProp2(target, "__esModule", {value: true});
  var __commonJS2 = (callback, module22) => () => {
    if (!module22) {
      module22 = {exports: {}};
      callback(module22.exports, module22);
    }
    return module22.exports;
  };
  var __export2 = (target, all) => {
    for (var name22 in all)
      __defProp2(target, name22, {get: all[name22], enumerable: true});
  };
  var __exportStar2 = (target, module22, desc) => {
    if (module22 && typeof module22 === "object" || typeof module22 === "function") {
      for (let key of __getOwnPropNames2(module22))
        if (!__hasOwnProp2.call(target, key) && key !== "default")
          __defProp2(target, key, {get: () => module22[key], enumerable: !(desc = __getOwnPropDesc2(module22, key)) || desc.enumerable});
    }
    return target;
  };
  var __toModule2 = (module22) => {
    if (module22 && module22.__esModule)
      return module22;
    return __exportStar2(__markAsModule2(__defProp2(module22 != null ? __create2(__getProtoOf2(module22)) : {}, "default", {value: module22, enumerable: true})), module22);
  };
  var require_bundle3 = __commonJS2((exports22) => {
    var __defProp22 = Object.defineProperty;
    var __markAsModule22 = (target) => __defProp22(target, "__esModule", {value: true});
    var __export22 = (target, all) => {
      for (var name222 in all)
        __defProp22(target, name222, {get: all[name222], enumerable: true});
    };
    __markAsModule22(exports22);
    __export22(exports22, {
      createLogger: () => createLogger2,
      versionTag: () => versionTag2
    });
    var name22 = "@explorelearning/logger";
    var version22 = "1.10.15";
    var description22 = "Fancy logging in the browser console";
    var main22 = "dist/bundle.js";
    var types22 = "dist/types/index.d.ts";
    var files22 = [
      "/dist"
    ];
    var scripts22 = {
      build: "node ../../helpers/build.js",
      "build:types": "npx tsc",
      test: "npx jest"
    };
    var repository22 = {
      type: "git",
      url: "git+https://github.com/ExploreLearning/el-web.git"
    };
    var author22 = "Brian McMillen <brian.mcmillen@explorelearning.com>";
    var license22 = "ISC";
    var bugs22 = {
      url: "https://github.com/ExploreLearning/el-web/issues"
    };
    var homepage22 = "https://github.com/ExploreLearning/el-web#readme";
    var package_default22 = {
      name: name22,
      version: version22,
      description: description22,
      main: main22,
      types: types22,
      files: files22,
      scripts: scripts22,
      repository: repository22,
      author: author22,
      license: license22,
      bugs: bugs22,
      homepage: homepage22
    };
    function log2(...params) {
      if (localStorage.getItem("debug") === "true")
        console.info(...params);
    }
    if (!window.ELLogger) {
      window.ELLogger = {
        versionTagMap: {}
      };
      window.addEventListener("load", () => {
        const {versionTagMap} = window.ELLogger;
        Object.keys(versionTagMap).forEach((name222) => {
          logVersionTag({name: name222, version: versionTagMap[name222]});
        });
      });
    }
    versionTag2(package_default22);
    function logVersionTag({name: name222, version: version222}) {
      log2(`%c${name222}%cv${version222}`, "color: #fbf1c7; background: #458588; padding: 2px 4px; border-radius: 3px 0 0 3px;", "color: #fbf1c7; background: #d65d0e; padding: 2px 4px; border-radius: 0 3px 3px 0");
    }
    function versionTag2({name: name222, version: version222}) {
      window.ELLogger.versionTagMap[name222] = version222;
    }
    function createLogger2(name222) {
      return (...params) => {
        log2(`${name222}:
`, ...params);
      };
    }
  });
  __markAsModule2(exports2);
  __export2(exports2, {
    default: () => src_default2
  });
  var import_logger2 = __toModule2(require_bundle3());
  var name2 = "@explorelearning/urls";
  var version2 = "1.10.15";
  var description2 = "Vue plugin for referencing common urls relative to the current domain name";
  var main2 = "dist/bundle.js";
  var types2 = "dist/types/index.d.ts";
  var files2 = [
    "/dist"
  ];
  var scripts2 = {
    build: "node ../../helpers/build.js && npm run markdown",
    "build:types": "npx tsc",
    markdown: "node ./helpers/generateMarkdown.js",
    test: "npx jest"
  };
  var repository2 = {
    type: "git",
    url: "git+https://github.com/ExploreLearning/el-web.git"
  };
  var author2 = "Brian McMillen <brian.mcmillen@explorelearning.com>";
  var license2 = "ISC";
  var bugs2 = {
    url: "https://github.com/ExploreLearning/el-web/issues"
  };
  var devDependencies2 = {
    "@explorelearning/logger": "^1.10.15"
  };
  var peerDependencies2 = {
    "@explorelearning/logger": "^0.0.1"
  };
  var homepage2 = "https://github.com/ExploreLearning/el-web#readme";
  var gitHead2 = "2be1f9dd4fc5e52d0baa2aa16fe56337b0b509aa";
  var package_default2 = {
    name: name2,
    version: version2,
    description: description2,
    main: main2,
    types: types2,
    files: files2,
    scripts: scripts2,
    repository: repository2,
    author: author2,
    license: license2,
    bugs: bugs2,
    devDependencies: devDependencies2,
    peerDependencies: peerDependencies2,
    homepage: homepage2,
    gitHead: gitHead2
  };
  import_logger2.versionTag(package_default2);
  function getBaseUrl() {
    const {host} = window.location;
    const parts = host.split(".");
    const name22 = parts[parts.length - 2];
    return {
      elclouddev: "elclouddev.net",
      elcloudstage: "elcloudstage.net",
      explorelearning: "explorelearning.com"
    }[name22] || "elclouddev.net";
  }
  function getEnvName(baseUrl) {
    return {
      "elclouddev.net": "dev",
      "elcloudstage.net": "stage",
      "explorelearning.com": "prod"
    }[baseUrl || getBaseUrl()] || "dev";
  }
  function getUrls(baseUrl = "") {
    const base = baseUrl || process.env.EL_URLS_BASE || getBaseUrl();
    const services = process.env.EL_URLS_SERVICES || `https://services.${base}`;
    const content = process.env.EL_URLS_CONTENT || `https://content.${base}`;
    const apps = process.env.EL_URLS_APPS || `https://apps.${base}`;
    const platform = process.env.EL_URLS_PLATFORM || `${services}/platform`;
    const platformApi = process.env.EL_URLS_PLATFORM_API || `${platform}/api`;
    const auth = process.env.EL_URLS_AUTH || `${platform}/auth`;
    const reflexApi = process.env.EL_URLS_REFLEX_API || `${services}/reflex/api`;
    const fraxApi = process.env.EL_URLS_FRAX_API || `${services}/frax/api`;
    const fraxSocket = process.env.EL_URLS_FRAX_SOCKET || `${services}/fraxws/api/frax-websocket`;
    const gizmos = process.env.EL_URLS_GIZMOS || `${services}/gizmos`;
    const nextgen = process.env.EL_URLS_NEXTGEN || `${services}/nextgen`;
    const student = process.env.EL_URLS_STUDENT || `${content}/reflex/index.html`;
    const accounts = process.env.EL_URLS_ACCOUNTS || `${apps}/account`;
    const login = process.env.EL_URLS_LOGIN || `${accounts}/login/reflex/teacher`;
    const logout = process.env.EL_URLS_LOGOUT || `${accounts}/reflex/logout`;
    const t4mfLogout = process.env.EL_URLS_T4MF_LOGOUT || "https://www.time4learning.com/App/Resources/Time4MathFactsLogout.aspx";
    const envName = getEnvName(base);
    const nextgenAssets = process.env.EL_URLS_NEXTGEN_ASSETS || `https://s3.amazonaws.com/el-gizmos-${envName}`;
    return {
      accounts,
      apps,
      auth,
      base,
      content,
      fraxApi,
      fraxSocket,
      gizmos,
      login,
      logout,
      nextgen,
      nextgenAssets,
      platform,
      platformApi,
      reflexApi,
      services,
      student,
      t4mfLogout
    };
  }
  var src_default2 = {
    install(Vue) {
      Vue.prototype.$urls = getUrls();
    },
    getBaseUrl,
    getUrls,
    getEnvName
  };
});

// ../logger/dist/bundle.js
var require_bundle2 = __commonJS((exports2) => {
  var __defProp2 = Object.defineProperty;
  var __markAsModule2 = (target) => __defProp2(target, "__esModule", {value: true});
  var __export2 = (target, all) => {
    for (var name22 in all)
      __defProp2(target, name22, {get: all[name22], enumerable: true});
  };
  __markAsModule2(exports2);
  __export2(exports2, {
    createLogger: () => createLogger2,
    versionTag: () => versionTag2
  });
  var name2 = "@explorelearning/logger";
  var version2 = "1.10.15";
  var description2 = "Fancy logging in the browser console";
  var main2 = "dist/bundle.js";
  var types2 = "dist/types/index.d.ts";
  var files2 = [
    "/dist"
  ];
  var scripts2 = {
    build: "node ../../helpers/build.js",
    "build:types": "npx tsc",
    test: "npx jest"
  };
  var repository2 = {
    type: "git",
    url: "git+https://github.com/ExploreLearning/el-web.git"
  };
  var author2 = "Brian McMillen <brian.mcmillen@explorelearning.com>";
  var license2 = "ISC";
  var bugs2 = {
    url: "https://github.com/ExploreLearning/el-web/issues"
  };
  var homepage2 = "https://github.com/ExploreLearning/el-web#readme";
  var package_default2 = {
    name: name2,
    version: version2,
    description: description2,
    main: main2,
    types: types2,
    files: files2,
    scripts: scripts2,
    repository: repository2,
    author: author2,
    license: license2,
    bugs: bugs2,
    homepage: homepage2
  };
  function log2(...params) {
    if (localStorage.getItem("debug") === "true")
      console.info(...params);
  }
  if (!window.ELLogger) {
    window.ELLogger = {
      versionTagMap: {}
    };
    window.addEventListener("load", () => {
      const {versionTagMap} = window.ELLogger;
      Object.keys(versionTagMap).forEach((name22) => {
        logVersionTag({name: name22, version: versionTagMap[name22]});
      });
    });
  }
  versionTag2(package_default2);
  function logVersionTag({name: name22, version: version22}) {
    log2(`%c${name22}%cv${version22}`, "color: #fbf1c7; background: #458588; padding: 2px 4px; border-radius: 3px 0 0 3px;", "color: #fbf1c7; background: #d65d0e; padding: 2px 4px; border-radius: 0 3px 3px 0");
  }
  function versionTag2({name: name22, version: version22}) {
    window.ELLogger.versionTagMap[name22] = version22;
  }
  function createLogger2(name22) {
    return (...params) => {
      log2(`${name22}:
`, ...params);
    };
  }
});

// src/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => src_default
});
var import_axios2 = __toModule(require("axios"));
var import_utils = __toModule(require("@explorelearning/utils"));
var import_urls = __toModule(require_bundle());

// src/response-logger.ts
var import_axios = __toModule(require("axios"));
var CookieRegEx = /(?:(?:^|.*;\s*)el-client\s*=\s*([^;]*).*$)|^.*$/;
var URLRegEx = /(http.?:\/\/.*\..{2}.?)(\/)(.*)/;
var ResponseLogger = class {
  constructor(logEndpoint) {
    this.logEndpoint = logEndpoint;
  }
  getFormattedTime() {
    function addZero(x, n) {
      while (x.toString().length < n) {
        x = "0" + x;
      }
      return x.toString();
    }
    const now = new Date();
    const hour = Number(now.getHours());
    const min = addZero(now.getMinutes(), 2);
    const sec = addZero(now.getSeconds(), 2);
    const ms = addZero(now.getMilliseconds(), 3);
    return `${hour}:${min}:${sec}:${ms}`;
  }
  log(response, xclaims, error) {
    return __async(this, null, function* () {
      var _a, _b;
      try {
        return import_axios.default.post(this.logEndpoint, {
          cookie: document.cookie.replace(CookieRegEx, "$1"),
          clientInfo: navigator.userAgent,
          sessionID: xclaims == null ? void 0 : xclaims.sessionID,
          error,
          trackingEntry: {
            url: (((_a = response == null ? void 0 : response.config) == null ? void 0 : _a.url) || "").replace(URLRegEx, "$2$3"),
            time: this.getFormattedTime(),
            status: response.status,
            error: (_b = response == null ? void 0 : response.body) == null ? void 0 : _b.error
          }
        });
      } catch (e) {
        console.error("failed to log response to backend", e);
        throw e;
      }
    });
  }
};
var response_logger_default = ResponseLogger;

// src/index.ts
var import_logger = __toModule(require_bundle2());

// package.json
var name = "@explorelearning/el-authenticator";
var version = "1.10.19";
var description = "Logic for authenticating an application with the auth api";
var main = "dist/bundle.js";
var types = "dist/types/index.d.ts";
var files = [
  "/dist"
];
var scripts = {
  build: "node ../../helpers/build.js --external=axios,@explorelearning/utils",
  "build:types": "npx tsc",
  test: "npx jest"
};
var repository = {
  type: "git",
  url: "git+https://github.com/explorelearning/el-web.git"
};
var author = "Brian McMillen <brian.mcmillen@explorelearning.com>";
var license = "ISC";
var bugs = {
  url: "https://github.com/explorelearning/el-web/issues"
};
var homepage = "https://github.com/explorelearning/el-web#readme";
var devDependencies = {
  "@explorelearning/logger": "^1.10.15",
  "@explorelearning/urls": "^1.10.15",
  "@explorelearning/utils": "^1.10.16",
  axios: "^0.21.1"
};
var peerDependencies = {
  "@explorelearning/logger": "^1.10.7",
  "@explorelearning/urls": "^1.9.8",
  "@explorelearning/utils": "^1.9.8",
  axios: "^0.21.1"
};
var gitHead = "e474bc856a8276bbc47c73a2a2ee69523319148e";
var package_default = {
  name,
  version,
  description,
  main,
  types,
  files,
  scripts,
  repository,
  author,
  license,
  bugs,
  homepage,
  devDependencies,
  peerDependencies,
  gitHead
};

// src/index.ts
import_logger.versionTag(package_default);
var log = import_logger.createLogger("Authenticator");
var ElAuthenticator = class {
  constructor(endpoints) {
    this.isRefreshTurnedOn = true;
    this.refreshing = false;
    const urls = import_urls.default.getUrls();
    this.endpoints = __assign({
      logging: urls.platform + "/clientLog",
      refresh: urls.platformApi + "/refresh"
    }, endpoints);
    this.responseLogger = new response_logger_default(this.endpoints.logging);
    this.httpsClient = import_axios2.default.create({withCredentials: true});
    this.httpsClient.interceptors.request.use((request) => {
      request.headers["X-CSRFToken"] = this.getToken();
      log("_api.interceptors.request.use", request.headers["X-CSRFToken"]);
      return request;
    });
    this.httpsClient.interceptors.response.use((response) => {
      const error = "The Authenticator should work as expected";
      this.responseLogger.log(response, this.getClaims(), error);
      return response;
    });
  }
  getDelay() {
    const delay = this.getClaims().exp * 1e3 - this.serverTime - performance.now();
    log("_getDelay", delay);
    return delay;
  }
  getQueryStringValue(key) {
    const encodedKey = encodeURIComponent(key).replace(/[.+*]/g, "\\$&");
    const regExp = new RegExp(`^(?:.*[&\\?]${encodedKey}(?:\\=([^&]*))?)?.*$`, "i");
    return decodeURIComponent(window.location.search.replace(regExp, "$1"));
  }
  updateClaims({header}) {
    log("_updateClaims", import_utils.copy(header));
    this.setClaims(this.decodeClaims(header));
    clearTimeout(this.reauthTimeout);
    const delay = this.getDelay();
    this.reauthTimeout = setTimeout(() => this.authenticate({force: true}), delay);
  }
  getClaims() {
    return __assign({}, this.claims);
  }
  decodeClaims(data) {
    log("decodeClaims", import_utils.copy(data));
    const claimsStr = Array.isArray(data) ? data[0] : data;
    return JSON.parse(atob(claimsStr));
  }
  setClaims(claims) {
    log("setClaims", import_utils.copy(claims));
    this.claims = claims;
  }
  getToken() {
    return this.getClaims().jti;
  }
  clear({logout = false, error = {status: 401}} = {}) {
    log("clear", logout, import_utils.copy(error));
    clearTimeout(this.reauthTimeout);
    this.claims = null;
    if (!logout) {
      return;
    }
    const auto = this.getQueryStringValue("auto") === "1";
    if (error.status === 401 && !auto && !this.logoutForwardURL) {
      location.href = this.endpoints.login;
      return;
    }
    const {status, data} = error;
    let query = "";
    if (typeof status !== "undefined") {
      query = "?e=error";
      if (data && typeof data.id !== "undefined") {
        query += "-" + data.id;
      }
    }
    if (typeof this.logoutForwardURL !== "undefined") {
      query += query ? "&" : "?";
      query += `f=${encodeURIComponent(this.logoutForwardURL)}`;
    }
    location.href = this.endpoints.logout + query;
  }
  setLogoutForwardURL(url) {
    this.logoutForwardURL = url;
  }
  turnOffRefresh() {
    this.isRefreshTurnedOn = false;
  }
  refresh() {
    return __async(this, null, function* () {
      log("refresh", this.refreshing);
      if (!this.refreshing && this.isRefreshTurnedOn) {
        this.refreshing = true;
        try {
          const {headers} = yield this.httpsClient.get(this.endpoints.refresh);
          this.updateClaims({header: headers["X-CLAIMS"] || headers["x-claims"]});
        } catch (e) {
          this.clear({logout: true});
        }
        this.refreshing = false;
      }
    });
  }
  authenticate() {
    return __async(this, arguments, function* ({force = false, logout = true} = {}) {
      log("authenticate", force);
      if (force) {
        this.clear();
      } else if (this.claims) {
        return true;
      }
      try {
        const {data, headers} = yield this.httpsClient.get(this.endpoints.auth);
        if (!this.serverTime) {
          this.serverTime = data.ServerTime.serverTime * 1e3 - performance.now();
        }
        this.updateClaims({header: headers["X-CLAIMS"] || headers["x-claims"]});
      } catch (e) {
        console.warn(`El Authenticator Error:" ${e}`);
        this.clear({logout, error: e.response || {}});
      }
    });
  }
};
var src_default = ElAuthenticator;
