/**
 * References to URL endpoints to use when making associated requests in the backend or when redirecting the user to a different window location.
 */
interface Endpoints {
    /** URL endpoint for authenticating the user's client */
    auth: string;
    /** URL where the user should be directed to in order to login */
    login: string;
    /** URL where the user should be directed to in order to logout */
    logout: string;
    /** URL endpoint for refreshing the client's claims object */
    refresh: string;
    /** URL endpoint to send log requests to */
    logging: string;
}
/**
 * A "claims" object, containing a jti token, expiration information and a session ID
 */
interface Claims {
    /** A string token sent in request headers to provide authentication to the backend */
    jti: string;
    /** The number of milliseconds before the client's authentication expires */
    exp: number;
    /** Unique id for the client's session */
    sessionID: number | string;
    /** The tenant id associated with the user's account */
    tenID: number;
    /** The id of the role of the associated user */
    roleID: number;
}
/**
 * Params object pass to the `authenticate` method
 */
interface AuthenticateParams {
    /** Whether or not to force a request to the backend, instead of relying on the internal claims reference */
    force?: boolean;
    /** Whether or not to logout after a failed authentication call */
    logout?: boolean;
}
export default class ElAuthenticator {
    private httpsClient;
    private endpoints;
    private claims;
    private serverTime;
    private reauthTimeout;
    private logoutForwardURL;
    private isRefreshTurnedOn;
    private refreshing;
    private responseLogger;
    /**
     * Initialize an Authenticator, setting endpoints, creating an associated response logger, and initializing an https client which will use the internal jti token reference when making requests to the backend
     * @param {Endpoints} endpoints The URLs to use for associated actions
     */
    constructor(endpoints: Endpoints);
    /**
     * Returns the number of milliseconds before the user needs to be reauthenticated
     * @return {number} Number of milliseconds
     */
    private getDelay;
    /**
     * Find the value of a specified key in the current url's query string
     * (Based on https://stackoverflow.com/questions/9870512)
     * @param {string} key Query key to get a value for
     * @return {string} Associated value for the specified key
     */
    private getQueryStringValue;
    /**
     * Use a provided claims header to update the internal reference and reset the delay before reauthenticating
     * @param {ClaimsParams} obj The claims param object
     */
    private updateClaims;
    /**
     * Retrieve the internal reference to the claims object
     * @return {Claims} The claims object
     */
    getClaims(): Claims;
    /**
     * Decode a provided encoded claims string and return the claims value as an object
     * @param {string | string[]} data The encoded claims data, either as a string or an array containing the string in the first index
     */
    decodeClaims(data: string | string[]): Claims;
    /**
     * Take an encoded claims header string (or string array), decode it, and parse it to a claims object to set as the internal reference
     * @param {ClaimsParams} obj The claims param object
     */
    setClaims(claims: Claims): void;
    /**
     * Retrieve the jti token from the claims object
     */
    getToken(): string;
    /**
     * Unset the claims object and optionally log out the user with a specified error code
     * @param {ClearParams} obj The clear params object
     */
    private clear;
    /**
     * Set a provided URL as the destination to send the user on logout
     * @param {string} url The URL string to set
     */
    setLogoutForwardURL(url: string): void;
    /**
     * Set the internal `isRefreshTurnedOn` value to `false`
     */
    turnOffRefresh(): void;
    /**
     * Get a new claims object from the refresh endpoint header value and update the internal value
     * @return {Promise<void>} A promise that the claims object will be updated
     */
    refresh(): Promise<void>;
    /**
     * Make a check to see if the user is authenticated, making a request to the backend if there is no internal reference to the claims object or if the `force` boolean param is `true`
     * @param {AuthenticateParams} obj The params object
     * @return {Promise<boolean>} A promise that the authentication check will occur; resolves with `true` if there is already an internal claims object reference
     */
    authenticate({ force, logout }?: AuthenticateParams): Promise<boolean>;
}
export {};
